#line 1 "parser.flex.cpp"

#line 3 "parser.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

/* %endif */

    #define yyget_lval yyget_lval

    #define yyset_lval yyset_lval

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

/* %if-c-only */

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef const struct yy_trans_info *yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static const struct yy_trans_info yy_transition[5742] =
    {
 {   0,   0 }, {   0,5614 }, {   0,   0 }, {   0,5612 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },
 {   7, 260 }, {   8, 260 }, {   9, 262 }, {  10, 264 }, {  11, 260 },
 {  12, 260 }, {  13, 260 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },
 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32, 262 }, {  33, 260 }, {  34, 260 }, {  35, 260 }, {  36, 260 },
 {  37, 260 }, {  38, 260 }, {  39, 260 }, {  40, 266 }, {  41, 266 },
 {  42, 266 }, {  43, 266 }, {  44, 260 }, {  45, 358 }, {  46, 281 },

 {  47, 266 }, {  48, 450 }, {  49, 450 }, {  50, 450 }, {  51, 450 },
 {  52, 450 }, {  53, 450 }, {  54, 450 }, {  55, 450 }, {  56, 450 },
 {  57, 450 }, {  58, 260 }, {  59, 260 }, {  60, 260 }, {  61, 260 },
 {  62, 260 }, {  63, 260 }, {  64, 260 }, {  65, 542 }, {  66, 542 },
 {  67, 542 }, {  68, 634 }, {  69, 542 }, {  70, 726 }, {  71, 542 },
 {  72, 542 }, {  73, 818 }, {  74, 542 }, {  75, 542 }, {  76, 542 },
 {  77, 542 }, {  78, 542 }, {  79, 542 }, {  80, 542 }, {  81, 542 },
 {  82, 542 }, {  83, 542 }, {  84, 542 }, {  85, 542 }, {  86, 542 },
 {  87, 542 }, {  88, 542 }, {  89, 542 }, {  90, 542 }, {  91, 260 },
 {  92, 260 }, {  93, 260 }, {  94, 266 }, {  95, 260 }, {  96, 260 },

 {  97, 542 }, {  98, 910 }, {  99, 542 }, { 100, 542 }, { 101,1002 },
 { 102, 542 }, { 103, 542 }, { 104, 542 }, { 105, 542 }, { 106, 542 },
 { 107, 542 }, { 108, 542 }, { 109, 542 }, { 110, 542 }, { 111, 542 },
 { 112,1094 }, { 113, 542 }, { 114, 542 }, { 115, 542 }, { 116, 542 },
 { 117, 542 }, { 118,1186 }, { 119, 542 }, { 120, 542 }, { 121, 542 },
 { 122, 542 }, { 123, 260 }, { 124, 260 }, { 125, 260 }, { 126, 260 },
 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,5482 }, {   1, 130 },
 {   2, 130 }, {   3, 130 }, {   4, 130 }, {   5, 130 }, {   6, 130 },
 {   7, 130 }, {   8, 130 }, {   9, 132 }, {  10, 134 }, {  11, 130 },
 {  12, 130 }, {  13, 130 }, {  14, 130 }, {  15, 130 }, {  16, 130 },

 {  17, 130 }, {  18, 130 }, {  19, 130 }, {  20, 130 }, {  21, 130 },
 {  22, 130 }, {  23, 130 }, {  24, 130 }, {  25, 130 }, {  26, 130 },
 {  27, 130 }, {  28, 130 }, {  29, 130 }, {  30, 130 }, {  31, 130 },
 {  32, 132 }, {  33, 130 }, {  34, 130 }, {  35, 130 }, {  36, 130 },
 {  37, 130 }, {  38, 130 }, {  39, 130 }, {  40, 136 }, {  41, 136 },
 {  42, 136 }, {  43, 136 }, {  44, 130 }, {  45, 228 }, {  46, 151 },
 {  47, 136 }, {  48, 320 }, {  49, 320 }, {  50, 320 }, {  51, 320 },
 {  52, 320 }, {  53, 320 }, {  54, 320 }, {  55, 320 }, {  56, 320 },
 {  57, 320 }, {  58, 130 }, {  59, 130 }, {  60, 130 }, {  61, 130 },
 {  62, 130 }, {  63, 130 }, {  64, 130 }, {  65, 412 }, {  66, 412 },

 {  67, 412 }, {  68, 504 }, {  69, 412 }, {  70, 596 }, {  71, 412 },
 {  72, 412 }, {  73, 688 }, {  74, 412 }, {  75, 412 }, {  76, 412 },
 {  77, 412 }, {  78, 412 }, {  79, 412 }, {  80, 412 }, {  81, 412 },
 {  82, 412 }, {  83, 412 }, {  84, 412 }, {  85, 412 }, {  86, 412 },
 {  87, 412 }, {  88, 412 }, {  89, 412 }, {  90, 412 }, {  91, 130 },
 {  92, 130 }, {  93, 130 }, {  94, 136 }, {  95, 130 }, {  96, 130 },
 {  97, 412 }, {  98, 780 }, {  99, 412 }, { 100, 412 }, { 101, 872 },
 { 102, 412 }, { 103, 412 }, { 104, 412 }, { 105, 412 }, { 106, 412 },
 { 107, 412 }, { 108, 412 }, { 109, 412 }, { 110, 412 }, { 111, 412 },
 { 112, 964 }, { 113, 412 }, { 114, 412 }, { 115, 412 }, { 116, 412 },

 { 117, 412 }, { 118,1056 }, { 119, 412 }, { 120, 412 }, { 121, 412 },
 { 122, 412 }, { 123, 130 }, { 124, 130 }, { 125, 130 }, { 126, 130 },
 { 127, 130 }, { 128, 130 }, {   0,  17 }, {   0,5352 }, {   0,   1 },
 {   0,5350 }, {   0,  16 }, {   0,5348 }, {   0,  12 }, {   0,5346 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  17 }, {   0,5331 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,5323 }, {   0,   0 }, {   0,5321 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,5317 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,5313 }, {   0,   0 }, {   0,5311 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,1012 },
 {  41,1012 }, {  42,1012 }, {  43,1012 }, {   0,   0 }, {  45,1104 },
 {   0,   0 }, {  47,1012 }, {  48,1196 }, {  49,1196 }, {  50,1196 },
 {  51,1196 }, {  52,1196 }, {  53,1196 }, {  54,1196 }, {  55,1196 },
 {  56,1196 }, {  57,1196 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1288 },
 {  66,1288 }, {  67,1288 }, {  68,1288 }, {  69,1288 }, {  70,1288 },
 {  71,1288 }, {  72,1288 }, {  73,1288 }, {  74,1288 }, {  75,1288 },
 {  76,1288 }, {  77,1288 }, {  78,1288 }, {  79,1288 }, {  80,1288 },

 {  81,1288 }, {  82,1288 }, {  83,1288 }, {  84,1288 }, {  85,1288 },
 {  86,1288 }, {  87,1288 }, {  88,1288 }, {  89,1288 }, {  90,1288 },
 {   0,  12 }, {   0,5254 }, {   0,   0 }, {  94,1012 }, {   0,   0 },
 {   0,   0 }, {  97,1288 }, {  98,1288 }, {  99,1288 }, { 100,1288 },
 { 101,1288 }, { 102,1288 }, { 103,1288 }, { 104,1288 }, { 105,1288 },
 { 106,1288 }, { 107,1288 }, { 108,1288 }, { 109,1288 }, { 110,1288 },
 { 111,1288 }, { 112,1288 }, { 113,1288 }, { 114,1288 }, { 115,1288 },
 { 116,1288 }, { 117,1288 }, { 118,1288 }, { 119,1288 }, { 120,1288 },
 { 121,1288 }, { 122,1288 }, { 108,   8 }, { 101,   6 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 114,  10 }, { 105,   8 },

 { 102,   6 }, {  40, 920 }, {  41, 920 }, {  42, 920 }, {  43, 920 },
 { 103, 183 }, {  45,1012 }, {   0,   0 }, {  47, 920 }, {  48,1288 },
 {  49,1288 }, {  50,1288 }, {  51,1288 }, {  52,1288 }, {  53,1288 },
 {  54,1288 }, {  55,1288 }, {  56,1288 }, {  57,1288 }, {   0,   0 },
 { 116, 183 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,1196 }, {  66,1196 }, {  67,1196 }, {  68,1196 },
 {  69,1196 }, {  70,1196 }, {  71,1196 }, {  72,1196 }, {  73,1196 },
 {  74,1196 }, {  75,1196 }, {  76,1196 }, {  77,1196 }, {  78,1196 },
 {  79,1196 }, {  80,1196 }, {  81,1196 }, {  82,1196 }, {  83,1196 },
 {  84,1196 }, {  85,1196 }, {  86,1196 }, {  87,1196 }, {  88,1196 },

 {  89,1196 }, {  90,1196 }, {   0,  12 }, {   0,5162 }, {   0,   0 },
 {  94, 920 }, {   0,   0 }, {   0,   0 }, {  97,1196 }, {  98,1196 },
 {  99,1196 }, { 100,1196 }, { 101,1196 }, { 102,1196 }, { 103,1196 },
 { 104,1196 }, { 105,1196 }, { 106,1196 }, { 107,1196 }, { 108,1196 },
 { 109,1196 }, { 110,1196 }, { 111,1196 }, { 112,1196 }, { 113,1196 },
 { 114,1196 }, { 115,1196 }, { 116,1196 }, { 117,1196 }, { 118,1196 },
 { 119,1196 }, { 120,1196 }, { 121,1196 }, { 122,1196 }, {   0,   0 },
 {   0,5130 }, {   0,  10 }, {   0,5128 }, {   0,   0 }, {   0,5126 },
 {   0,  11 }, {   0,5124 }, {   0,   0 }, {  40, 828 }, {  41, 828 },
 {  42, 828 }, {  43, 828 }, {   0,   0 }, {  45, 920 }, {  46,1288 },

 {  47, 828 }, {  48,1320 }, {  49,1320 }, {  50,1320 }, {  51,1320 },
 {  52,1320 }, {  53,1320 }, {  54,1320 }, {  55,1320 }, {  56,1320 },
 {  57,1320 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1412 }, {  66,1412 },
 {  67,1412 }, {  68,1412 }, {  69,1412 }, {  70,1412 }, {  71,1412 },
 {  72,1412 }, {  73,1412 }, {  74,1412 }, {  75,1412 }, {  76,1412 },
 {  77,1412 }, {  78,1412 }, {  79,1412 }, {  80,1412 }, {  81,1412 },
 {  82,1412 }, {  83,1412 }, {  84,1412 }, {  85,1412 }, {  86,1412 },
 {  87,1412 }, {  88,1412 }, {  89,1412 }, {  90,1412 }, {   0,  12 },
 {   0,5070 }, {   0,   0 }, {  94, 828 }, {   0,   0 }, {   0,   0 },

 {  97,1412 }, {  98,1412 }, {  99,1412 }, { 100,1412 }, { 101,1412 },
 { 102,1412 }, { 103,1412 }, { 104,1412 }, { 105,1412 }, { 106,1412 },
 { 107,1412 }, { 108,1412 }, { 109,1412 }, { 110,1412 }, { 111,1412 },
 { 112,1412 }, { 113,1412 }, { 114,1412 }, { 115,1412 }, { 116,1412 },
 { 117,1412 }, { 118,1412 }, { 119,1412 }, { 120,1412 }, { 121,1412 },
 { 122,1412 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40, 736 }, {  41, 736 }, {  42, 736 }, {  43, 736 }, { 104,   4 },
 {  45, 828 }, {   0,   0 }, {  47, 736 }, {  48,1412 }, {  49,1412 },
 {  50,1412 }, {  51,1412 }, {  52,1412 }, {  53,1412 }, {  54,1412 },

 {  55,1412 }, {  56,1412 }, {  57,1412 }, {   0,   0 }, {   0,   0 },
 { 116,   2 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,1320 }, {  66,1320 }, {  67,1320 }, {  68,1320 }, {  69,1320 },
 {  70,1320 }, {  71,1320 }, {  72,1320 }, {  73,1320 }, {  74,1320 },
 {  75,1320 }, {  76,1320 }, {  77,1320 }, {  78,1320 }, {  79,1320 },
 {  80,1320 }, {  81,1320 }, {  82,1320 }, {  83,1320 }, {  84,1320 },
 {  85,1320 }, {  86,1320 }, {  87,1320 }, {  88,1320 }, {  89,1320 },
 {  90,1320 }, {   0,  12 }, {   0,4978 }, {   0,   0 }, {  94, 736 },
 {   0,   0 }, {   0,   0 }, {  97,1320 }, {  98,1320 }, {  99,1320 },
 { 100,1320 }, { 101,1320 }, { 102,1320 }, { 103,1320 }, { 104,1320 },

 { 105,1320 }, { 106,1320 }, { 107,1320 }, { 108,1320 }, { 109,1320 },
 { 110,1320 }, { 111,1320 }, { 112,1320 }, { 113,1320 }, { 114,1320 },
 { 115,1320 }, { 116,1320 }, { 117,1320 }, { 118,1320 }, { 119,1320 },
 { 120,1320 }, { 121,1320 }, { 122,1320 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40, 644 }, {  41, 644 }, {  42, 644 },
 {  43, 644 }, {   0,   0 }, {  45, 736 }, {   0,   0 }, {  47, 644 },
 {  48,1320 }, {  49,1320 }, {  50,1320 }, {  51,1320 }, {  52,1320 },
 {  53,1320 }, {  54,1320 }, {  55,1320 }, {  56,1320 }, {  57,1320 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  65,1228 }, {  66,1228 }, {  67,1228 },
 {  68,1228 }, {  69,1228 }, {  70,1228 }, {  71,1228 }, {  72,1228 },
 {  73,1228 }, {  74,1228 }, {  75,1228 }, {  76,1228 }, {  77,1228 },
 {  78,1228 }, {  79,1228 }, {  80,1228 }, {  81,1228 }, {  82,1228 },
 {  83,1228 }, {  84,1228 }, {  85,1228 }, {  86,1228 }, {  87,1228 },
 {  88,1228 }, {  89,1228 }, {  90,1228 }, {   0,  12 }, {   0,4886 },
 {   0,   0 }, {  94, 644 }, {   0,   0 }, {   0,   0 }, {  97,1228 },
 {  98,1228 }, {  99,1228 }, { 100,1228 }, { 101,1228 }, { 102,1228 },
 { 103,1228 }, { 104,1228 }, { 105,1228 }, { 106,1228 }, { 107,1228 },
 { 108,1228 }, { 109,1228 }, { 110,1228 }, { 111,1412 }, { 112,1228 },

 { 113,1228 }, { 114,1228 }, { 115,1228 }, { 116,1228 }, { 117,1228 },
 { 118,1228 }, { 119,1228 }, { 120,1228 }, { 121,1228 }, { 122,1228 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40, 552 },
 {  41, 552 }, {  42, 552 }, {  43, 552 }, {   0,   0 }, {  45, 644 },
 {   0,   0 }, {  47, 552 }, {  48,1228 }, {  49,1228 }, {  50,1228 },
 {  51,1228 }, {  52,1228 }, {  53,1228 }, {  54,1228 }, {  55,1228 },
 {  56,1228 }, {  57,1228 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1136 },
 {  66,1136 }, {  67,1136 }, {  68,1136 }, {  69,1136 }, {  70,1136 },

 {  71,1136 }, {  72,1136 }, {  73,1136 }, {  74,1136 }, {  75,1136 },
 {  76,1136 }, {  77,1136 }, {  78,1136 }, {  79,1136 }, {  80,1136 },
 {  81,1136 }, {  82,1136 }, {  83,1136 }, {  84,1136 }, {  85,1136 },
 {  86,1136 }, {  87,1136 }, {  88,1136 }, {  89,1136 }, {  90,1136 },
 {   0,  12 }, {   0,4794 }, {   0,   0 }, {  94, 552 }, {   0,   0 },
 {   0,   0 }, {  97,1136 }, {  98,1136 }, {  99,1136 }, { 100,1136 },
 { 101,1136 }, { 102,1136 }, { 103,1136 }, { 104,1136 }, { 105,1136 },
 { 106,1136 }, { 107,1136 }, { 108,1136 }, { 109,1136 }, { 110,1136 },
 { 111,1136 }, { 112,1136 }, { 113,1136 }, { 114,1136 }, { 115,1136 },
 { 116,1136 }, { 117,1412 }, { 118,1136 }, { 119,1136 }, { 120,1136 },

 { 121,1136 }, { 122,1136 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40, 460 }, {  41, 460 }, {  42, 460 }, {  43, 460 },
 {   0,   0 }, {  45, 552 }, {   0,   0 }, {  47, 460 }, {  48,1136 },
 {  49,1136 }, {  50,1136 }, {  51,1136 }, {  52,1136 }, {  53,1136 },
 {  54,1136 }, {  55,1136 }, {  56,1136 }, {  57,1136 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,1044 }, {  66,1044 }, {  67,1044 }, {  68,1044 },
 {  69,1044 }, {  70,1044 }, {  71,1044 }, {  72,1044 }, {  73,1044 },
 {  74,1044 }, {  75,1044 }, {  76,1044 }, {  77,1044 }, {  78,1044 },

 {  79,1044 }, {  80,1044 }, {  81,1044 }, {  82,1044 }, {  83,1044 },
 {  84,1044 }, {  85,1044 }, {  86,1044 }, {  87,1044 }, {  88,1044 },
 {  89,1044 }, {  90,1044 }, {   0,  12 }, {   0,4702 }, {   0,   0 },
 {  94, 460 }, {   0,   0 }, {   0,   0 }, {  97,1044 }, {  98,1044 },
 {  99,1044 }, { 100,1044 }, { 101,1044 }, { 102,1044 }, { 103,1044 },
 { 104,1044 }, { 105,1044 }, { 106,1044 }, { 107,1044 }, { 108,1044 },
 { 109,1044 }, { 110,1412 }, { 111,1044 }, { 112,1044 }, { 113,1044 },
 { 114,1044 }, { 115,1044 }, { 116,1044 }, { 117,1044 }, { 118,1044 },
 { 119,1044 }, { 120,1044 }, { 121,1044 }, { 122,1044 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40, 368 }, {  41, 368 },
 {  42, 368 }, {  43, 368 }, {   0,   0 }, {  45, 460 }, {   0,   0 },
 {  47, 368 }, {  48,1044 }, {  49,1044 }, {  50,1044 }, {  51,1044 },
 {  52,1044 }, {  53,1044 }, {  54,1044 }, {  55,1044 }, {  56,1044 },
 {  57,1044 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 952 }, {  66, 952 },
 {  67, 952 }, {  68, 952 }, {  69, 952 }, {  70, 952 }, {  71, 952 },
 {  72, 952 }, {  73, 952 }, {  74, 952 }, {  75, 952 }, {  76, 952 },
 {  77, 952 }, {  78, 952 }, {  79, 952 }, {  80, 952 }, {  81, 952 },
 {  82, 952 }, {  83, 952 }, {  84, 952 }, {  85, 952 }, {  86, 952 },

 {  87, 952 }, {  88, 952 }, {  89, 952 }, {  90, 952 }, {   0,  12 },
 {   0,4610 }, {   0,   0 }, {  94, 368 }, {   0,   0 }, {   0,   0 },
 {  97, 952 }, {  98, 952 }, {  99, 952 }, { 100, 952 }, { 101,1412 },
 { 102, 952 }, { 103, 952 }, { 104, 952 }, { 105, 952 }, { 106, 952 },
 { 107, 952 }, { 108, 952 }, { 109, 952 }, { 110, 952 }, { 111, 952 },
 { 112, 952 }, { 113, 952 }, { 114, 952 }, { 115, 952 }, { 116, 952 },
 { 117, 952 }, { 118, 952 }, { 119, 952 }, { 120, 952 }, { 121, 952 },
 { 122, 952 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40, 276 }, {  41, 276 }, {  42, 276 }, {  43, 276 }, {   0,   0 },

 {  45, 368 }, {   0,   0 }, {  47, 276 }, {  48, 952 }, {  49, 952 },
 {  50, 952 }, {  51, 952 }, {  52, 952 }, {  53, 952 }, {  54, 952 },
 {  55, 952 }, {  56, 952 }, {  57, 952 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 860 }, {  66, 860 }, {  67, 860 }, {  68, 860 }, {  69, 860 },
 {  70, 860 }, {  71, 860 }, {  72, 860 }, {  73, 860 }, {  74, 860 },
 {  75, 860 }, {  76, 860 }, {  77, 860 }, {  78, 860 }, {  79, 860 },
 {  80, 860 }, {  81, 860 }, {  82, 860 }, {  83, 860 }, {  84, 860 },
 {  85, 860 }, {  86, 860 }, {  87, 860 }, {  88, 860 }, {  89, 860 },
 {  90, 860 }, {   0,  12 }, {   0,4518 }, {   0,   0 }, {  94, 276 },

 {   0,   0 }, {   0,   0 }, {  97, 860 }, {  98, 860 }, {  99, 860 },
 { 100, 860 }, { 101, 860 }, { 102, 860 }, { 103, 860 }, { 104, 860 },
 { 105, 860 }, { 106, 860 }, { 107, 860 }, { 108, 860 }, { 109, 860 },
 { 110,1412 }, { 111, 860 }, { 112, 860 }, { 113, 860 }, { 114, 860 },
 { 115, 860 }, { 116, 860 }, { 117, 860 }, { 118, 860 }, { 119, 860 },
 { 120, 860 }, { 121, 860 }, { 122, 860 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40, 184 }, {  41, 184 }, {  42, 184 },
 {  43, 184 }, {   0,   0 }, {  45, 276 }, {   0,   0 }, {  47, 184 },
 {  48, 860 }, {  49, 860 }, {  50, 860 }, {  51, 860 }, {  52, 860 },

 {  53, 860 }, {  54, 860 }, {  55, 860 }, {  56, 860 }, {  57, 860 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, 768 }, {  66, 768 }, {  67, 768 },
 {  68, 768 }, {  69, 768 }, {  70, 768 }, {  71, 768 }, {  72, 768 },
 {  73, 768 }, {  74, 768 }, {  75, 768 }, {  76, 768 }, {  77, 768 },
 {  78, 768 }, {  79, 768 }, {  80, 768 }, {  81, 768 }, {  82, 768 },
 {  83, 768 }, {  84, 768 }, {  85, 768 }, {  86, 768 }, {  87, 768 },
 {  88, 768 }, {  89, 768 }, {  90, 768 }, {   0,  12 }, {   0,4426 },
 {   0,   0 }, {  94, 184 }, {   0,   0 }, {   0,   0 }, {  97, 768 },
 {  98, 768 }, {  99, 768 }, { 100, 768 }, { 101, 768 }, { 102, 768 },

 { 103, 768 }, { 104, 768 }, { 105, 768 }, { 106, 768 }, { 107, 768 },
 { 108, 768 }, { 109, 768 }, { 110, 768 }, { 111, 768 }, { 112, 768 },
 { 113, 768 }, { 114,1412 }, { 115, 768 }, { 116, 768 }, { 117, 768 },
 { 118, 768 }, { 119, 768 }, { 120, 768 }, { 121, 768 }, { 122, 768 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,  92 },
 {  41,  92 }, {  42,  92 }, {  43,  92 }, {   0,   0 }, {  45, 184 },
 {   0,   0 }, {  47,  92 }, {  48, 768 }, {  49, 768 }, {  50, 768 },
 {  51, 768 }, {  52, 768 }, {  53, 768 }, {  54, 768 }, {  55, 768 },
 {  56, 768 }, {  57, 768 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 676 },
 {  66, 676 }, {  67, 676 }, {  68, 676 }, {  69, 676 }, {  70, 676 },
 {  71, 676 }, {  72, 676 }, {  73, 676 }, {  74, 676 }, {  75, 676 },
 {  76, 676 }, {  77, 676 }, {  78, 676 }, {  79, 676 }, {  80, 676 },
 {  81, 676 }, {  82, 676 }, {  83, 676 }, {  84, 676 }, {  85, 676 },
 {  86, 676 }, {  87, 676 }, {  88, 676 }, {  89, 676 }, {  90, 676 },
 {   0,  12 }, {   0,4334 }, {   0,   0 }, {  94,  92 }, {   0,   0 },
 {   0,   0 }, {  97,1412 }, {  98, 676 }, {  99, 676 }, { 100, 676 },
 { 101, 676 }, { 102, 676 }, { 103, 676 }, { 104, 676 }, { 105, 676 },
 { 106, 676 }, { 107, 676 }, { 108, 676 }, { 109, 676 }, { 110, 676 },

 { 111, 676 }, { 112, 676 }, { 113, 676 }, { 114, 676 }, { 115, 676 },
 { 116, 676 }, { 117, 676 }, { 118, 676 }, { 119, 676 }, { 120, 676 },
 { 121, 676 }, { 122, 676 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {   0,   0 }, {  45,  92 }, {   0,   0 }, {  47,   0 }, {  48, 184 },
 {  49, 184 }, {  50, 184 }, {  51, 184 }, {  52, 184 }, {  53, 184 },
 {  54, 184 }, {  55, 184 }, {  56, 184 }, {  57, 184 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, 276 }, {  66, 276 }, {  67, 276 }, {  68, 276 },

 {  69, 276 }, {  70, 276 }, {  71, 276 }, {  72, 276 }, {  73, 276 },
 {  74, 276 }, {  75, 276 }, {  76, 276 }, {  77, 276 }, {  78, 276 },
 {  79, 276 }, {  80, 276 }, {  81, 276 }, {  82, 276 }, {  83, 276 },
 {  84, 276 }, {  85, 276 }, {  86, 276 }, {  87, 276 }, {  88, 276 },
 {  89, 276 }, {  90, 276 }, {   0,  12 }, {   0,4242 }, {   0,   0 },
 {  94,   0 }, {   0,   0 }, {   0,   0 }, {  97, 276 }, {  98, 276 },
 {  99, 276 }, { 100, 276 }, { 101, 276 }, { 102, 276 }, { 103, 276 },
 { 104, 276 }, { 105, 276 }, { 106, 276 }, { 107, 276 }, { 108, 276 },
 { 109, 276 }, { 110, 276 }, { 111, 276 }, { 112, 276 }, { 113, 276 },
 { 114, 276 }, { 115, 276 }, { 116, 276 }, { 117, 276 }, { 118, 276 },

 { 119, 276 }, { 120, 276 }, { 121, 276 }, { 122, 276 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40, -92 }, {  41, -92 },
 {  42, -92 }, {  43, -92 }, {   0,   0 }, {  45,   0 }, {   0,   0 },
 {  47, -92 }, {  48,  92 }, {  49,  92 }, {  50,  92 }, {  51,  92 },
 {  52,  92 }, {  53,  92 }, {  54,  92 }, {  55,  92 }, {  56,  92 },
 {  57,  92 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 184 }, {  66, 184 },
 {  67, 184 }, {  68, 184 }, {  69, 184 }, {  70, 184 }, {  71, 184 },
 {  72, 184 }, {  73, 184 }, {  74, 184 }, {  75, 184 }, {  76, 184 },

 {  77, 184 }, {  78, 184 }, {  79, 184 }, {  80, 184 }, {  81, 184 },
 {  82, 184 }, {  83, 184 }, {  84, 184 }, {  85, 184 }, {  86, 184 },
 {  87, 184 }, {  88, 184 }, {  89, 184 }, {  90, 184 }, {   0,  12 },
 {   0,4150 }, {   0,   0 }, {  94, -92 }, {   0,   0 }, {   0,   0 },
 {  97, 184 }, {  98, 184 }, {  99, 184 }, { 100, 184 }, { 101, 184 },
 { 102, 184 }, { 103, 184 }, { 104, 184 }, { 105, 184 }, { 106, 184 },
 { 107, 184 }, { 108, 184 }, { 109, 184 }, { 110, 184 }, { 111, 184 },
 { 112, 184 }, { 113, 184 }, { 114, 184 }, { 115, 184 }, { 116, 184 },
 { 117, 184 }, { 118, 184 }, { 119, 184 }, { 120, 184 }, { 121, 184 },
 { 122, 184 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-184 }, {  41,-184 }, {  42,-184 }, {  43,-184 }, {   0,   0 },
 {  45, -92 }, {  46,1228 }, {  47,-184 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,  92 }, {  66,  92 }, {  67,  92 }, {  68,  92 }, {  69,  92 },
 {  70,  92 }, {  71,  92 }, {  72,  92 }, {  73,  92 }, {  74,  92 },
 {  75,  92 }, {  76,  92 }, {  77,  92 }, {  78,  92 }, {  79,  92 },
 {  80,  92 }, {  81,  92 }, {  82,  92 }, {  83,  92 }, {  84,  92 },

 {  85,  92 }, {  86,  92 }, {  87,  92 }, {  88,  92 }, {  89,  92 },
 {  90,  92 }, {   0,  12 }, {   0,4058 }, {   0,   0 }, {  94,-184 },
 {   0,   0 }, {   0,   0 }, {  97,  92 }, {  98,  92 }, {  99,  92 },
 { 100,  92 }, { 101,  92 }, { 102,  92 }, { 103,  92 }, { 104,  92 },
 { 105,  92 }, { 106,  92 }, { 107,  92 }, { 108,  92 }, { 109,  92 },
 { 110,  92 }, { 111,  92 }, { 112,  92 }, { 113,  92 }, { 114,  92 },
 { 115,  92 }, { 116,  92 }, { 117,  92 }, { 118,  92 }, { 119,  92 },
 { 120,  92 }, { 121,  92 }, { 122,  92 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-276 }, {  41,-276 }, {  42,-276 },

 {  43,-276 }, {   0,   0 }, {  45,-184 }, {   0,   0 }, {  47,-276 },
 {  48, -92 }, {  49, -92 }, {  50, -92 }, {  51, -92 }, {  52, -92 },
 {  53, -92 }, {  54, -92 }, {  55, -92 }, {  56, -92 }, {  57, -92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,  12 }, {   0,3966 },

 {   0,   0 }, {  94,-276 }, {   0,   0 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-368 },
 {  41,-368 }, {  42,-368 }, {  43,-368 }, {   0,   0 }, {  45,-276 },
 {  46,  92 }, {  47,-368 }, {  48,   0 }, {  49,   0 }, {  50,   0 },

 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, -92 },
 {  66, -92 }, {  67, -92 }, {  68, -92 }, {  69, -92 }, {  70, -92 },
 {  71, -92 }, {  72, -92 }, {  73, -92 }, {  74, -92 }, {  75, -92 },
 {  76, -92 }, {  77, -92 }, {  78, -92 }, {  79, -92 }, {  80, -92 },
 {  81, -92 }, {  82, -92 }, {  83, -92 }, {  84, -92 }, {  85, -92 },
 {  86, -92 }, {  87, -92 }, {  88, -92 }, {  89, -92 }, {  90, -92 },
 {   0,   0 }, {   0,3874 }, {   0,   0 }, {  94,-368 }, {   0,   0 },
 {   0,   0 }, {  97, -92 }, {  98, -92 }, {  99, -92 }, { 100, -92 },

 { 101, -92 }, { 102, -92 }, { 103, -92 }, { 104, -92 }, { 105, -92 },
 { 106, -92 }, { 107, -92 }, { 108, -92 }, { 109, -92 }, { 110, -92 },
 { 111, -92 }, { 112, -92 }, { 113, -92 }, { 114, -92 }, { 115, -92 },
 { 116, -92 }, { 117, -92 }, { 118, -92 }, { 119, -92 }, { 120, -92 },
 { 121, -92 }, { 122, -92 }, {   0,  12 }, {   0,3842 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 984 },
 {  49, 984 }, {  50, 984 }, {  51, 984 }, {  52, 984 }, {  53, 984 },
 {  54, 984 }, {  55, 984 }, {  56, 984 }, {  57, 984 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-492 }, {  41,-492 },
 {  42,-492 }, {  43,-492 }, {   0,   0 }, {  45,-400 }, {  46, -32 },
 {  47,-492 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,  92 }, {  66,  92 },
 {  67,  92 }, {  68,  92 }, {  69,  92 }, {  70,  92 }, {  71,  92 },
 {  72,  92 }, {  73,  92 }, {  74,  92 }, {  75,  92 }, {  76,  92 },

 {  77,  92 }, {  78,  92 }, {  79,  92 }, {  80,  92 }, {  81,  92 },
 {  82,  92 }, {  83,  92 }, {  84,  92 }, {  85,  92 }, {  86,  92 },
 {  87,  92 }, {  88,  92 }, {  89,  92 }, {  90,  92 }, {   0,  12 },
 {   0,3750 }, {   0,   0 }, {  94,-492 }, {   0,   0 }, {   0,   0 },
 {  97,  92 }, {  98,  92 }, {  99,  92 }, { 100,  92 }, { 101,  92 },
 { 102,  92 }, { 103,  92 }, { 104,  92 }, { 105,  92 }, { 106,  92 },
 { 107,  92 }, { 108,  92 }, { 109,  92 }, { 110,  92 }, { 111,  92 },
 { 112,  92 }, { 113,  92 }, { 114,  92 }, { 115,  92 }, { 116,  92 },
 { 117,  92 }, { 118,  92 }, { 119,  92 }, { 120,  92 }, { 121,  92 },
 { 122,  92 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-584 }, {  41,-584 }, {  42,-584 }, {  43,-584 }, {   0,   0 },
 {  45,-492 }, {   0,   0 }, {  47,-584 }, {  48,  92 }, {  49,  92 },
 {  50,  92 }, {  51,  92 }, {  52,  92 }, {  53,  92 }, {  54,  92 },
 {  55,  92 }, {  56,  92 }, {  57,  92 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },

 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {   0,  12 }, {   0,3658 }, {   0,   0 }, {  94,-584 },
 {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-676 }, {  41,-676 }, {  42,-676 },

 {  43,-676 }, {   0,   0 }, {  45,-584 }, {  46, 736 }, {  47,-676 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, -92 }, {  66, -92 }, {  67, -92 },
 {  68, -92 }, {  69, -92 }, {  70, -92 }, {  71, -92 }, {  72, -92 },
 {  73, -92 }, {  74, -92 }, {  75, -92 }, {  76, -92 }, {  77, -92 },
 {  78, -92 }, {  79, -92 }, {  80, -92 }, {  81, -92 }, {  82, -92 },
 {  83, -92 }, {  84, -92 }, {  85, -92 }, {  86, -92 }, {  87, -92 },
 {  88, -92 }, {  89, -92 }, {  90, -92 }, {   0,  12 }, {   0,3566 },

 {   0,   0 }, {  94,-676 }, {   0,   0 }, {   0,   0 }, {  97, -92 },
 {  98, -92 }, {  99, -92 }, { 100, -92 }, { 101, -92 }, { 102, -92 },
 { 103, -92 }, { 104, -92 }, { 105, -92 }, { 106, -92 }, { 107, -92 },
 { 108, -92 }, { 109, -92 }, { 110, -92 }, { 111, -92 }, { 112, -92 },
 { 113, -92 }, { 114, -92 }, { 115, -92 }, { 116, -92 }, { 117, -92 },
 { 118, -92 }, { 119, -92 }, { 120, -92 }, { 121, -92 }, { 122, -92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-768 },
 {  41,-768 }, {  42,-768 }, {  43,-768 }, {   0,   0 }, {  45,-676 },
 {   0,   0 }, {  47,-768 }, {  48, -92 }, {  49, -92 }, {  50, -92 },

 {  51, -92 }, {  52, -92 }, {  53, -92 }, {  54, -92 }, {  55, -92 },
 {  56, -92 }, {  57, -92 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-184 },
 {  66,-184 }, {  67,-184 }, {  68,-184 }, {  69,-184 }, {  70,-184 },
 {  71,-184 }, {  72,-184 }, {  73,-184 }, {  74,-184 }, {  75,-184 },
 {  76,-184 }, {  77,-184 }, {  78,-184 }, {  79,-184 }, {  80,-184 },
 {  81,-184 }, {  82,-184 }, {  83,-184 }, {  84,-184 }, {  85,-184 },
 {  86,-184 }, {  87,-184 }, {  88,-184 }, {  89,-184 }, {  90,-184 },
 {   0,  12 }, {   0,3474 }, {   0,   0 }, {  94,-768 }, {   0,   0 },
 {   0,   0 }, {  97,-184 }, {  98,-184 }, {  99,-184 }, { 100,-184 },

 { 101,-184 }, { 102,-184 }, { 103,-184 }, { 104,-184 }, { 105,-184 },
 { 106,-184 }, { 107,-184 }, { 108,-184 }, { 109, 768 }, { 110,-184 },
 { 111,-184 }, { 112,-184 }, { 113,-184 }, { 114,-184 }, { 115,-184 },
 { 116,-184 }, { 117, 860 }, { 118,-184 }, { 119,-184 }, { 120,-184 },
 { 121,-184 }, { 122,-184 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-860 }, {  41,-860 }, {  42,-860 }, {  43,-860 },
 {   0,   0 }, {  45,-768 }, {   0,   0 }, {  47,-860 }, {  48,-184 },
 {  49,-184 }, {  50,-184 }, {  51,-184 }, {  52,-184 }, {  53,-184 },
 {  54,-184 }, {  55,-184 }, {  56,-184 }, {  57,-184 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-276 }, {  66,-276 }, {  67,-276 }, {  68,-276 },
 {  69,-276 }, {  70,-276 }, {  71,-276 }, {  72,-276 }, {  73,-276 },
 {  74,-276 }, {  75,-276 }, {  76,-276 }, {  77,-276 }, {  78,-276 },
 {  79,-276 }, {  80,-276 }, {  81,-276 }, {  82,-276 }, {  83,-276 },
 {  84,-276 }, {  85,-276 }, {  86,-276 }, {  87,-276 }, {  88,-276 },
 {  89,-276 }, {  90,-276 }, {   0,  12 }, {   0,3382 }, {   0,   0 },
 {  94,-860 }, {   0,   0 }, {   0,   0 }, {  97,-276 }, {  98,-276 },
 {  99,-276 }, { 100,-276 }, { 101,-276 }, { 102,-276 }, { 103,-276 },
 { 104,-276 }, { 105,-276 }, { 106,-276 }, { 107,-276 }, { 108,-276 },

 { 109,-276 }, { 110, 860 }, { 111,-276 }, { 112,-276 }, { 113,-276 },
 { 114,-276 }, { 115,-276 }, { 116,-276 }, { 117,-276 }, { 118,-276 },
 { 119,-276 }, { 120,-276 }, { 121,-276 }, { 122,-276 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-952 }, {  41,-952 },
 {  42,-952 }, {  43,-952 }, {   0,   0 }, {  45,-860 }, {   0,   0 },
 {  47,-952 }, {  48,-276 }, {  49,-276 }, {  50,-276 }, {  51,-276 },
 {  52,-276 }, {  53,-276 }, {  54,-276 }, {  55,-276 }, {  56,-276 },
 {  57,-276 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-368 }, {  66,-368 },

 {  67,-368 }, {  68,-368 }, {  69,-368 }, {  70,-368 }, {  71,-368 },
 {  72,-368 }, {  73,-368 }, {  74,-368 }, {  75,-368 }, {  76,-368 },
 {  77,-368 }, {  78,-368 }, {  79,-368 }, {  80,-368 }, {  81,-368 },
 {  82,-368 }, {  83,-368 }, {  84,-368 }, {  85,-368 }, {  86,-368 },
 {  87,-368 }, {  88,-368 }, {  89,-368 }, {  90,-368 }, {   0,  12 },
 {   0,3290 }, {   0,   0 }, {  94,-952 }, {   0,   0 }, {   0,   0 },
 {  97,-368 }, {  98,-368 }, {  99,-368 }, { 100,-368 }, { 101,-368 },
 { 102,-368 }, { 103,-368 }, { 104,-368 }, { 105,-368 }, { 106,-368 },
 { 107,-368 }, { 108,-368 }, { 109,-368 }, { 110,-368 }, { 111,-368 },
 { 112,-368 }, { 113,-368 }, { 114,-368 }, { 115,-368 }, { 116, 860 },

 { 117,-368 }, { 118,-368 }, { 119,-368 }, { 120,-368 }, { 121,-368 },
 { 122,-368 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-1044 }, {  41,-1044 }, {  42,-1044 }, {  43,-1044 }, {   0,   0 },
 {  45,-952 }, {   0,   0 }, {  47,-1044 }, {  48,-368 }, {  49,-368 },
 {  50,-368 }, {  51,-368 }, {  52,-368 }, {  53,-368 }, {  54,-368 },
 {  55,-368 }, {  56,-368 }, {  57,-368 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-460 }, {  66,-460 }, {  67,-460 }, {  68,-460 }, {  69,-460 },
 {  70,-460 }, {  71,-460 }, {  72,-460 }, {  73,-460 }, {  74,-460 },

 {  75,-460 }, {  76,-460 }, {  77,-460 }, {  78,-460 }, {  79,-460 },
 {  80,-460 }, {  81,-460 }, {  82,-460 }, {  83,-460 }, {  84,-460 },
 {  85,-460 }, {  86,-460 }, {  87,-460 }, {  88,-460 }, {  89,-460 },
 {  90,-460 }, {   0,  12 }, {   0,3198 }, {   0,   0 }, {  94,-1044 },
 {   0,   0 }, {   0,   0 }, {  97,-460 }, {  98,-460 }, {  99,-460 },
 { 100,-460 }, { 101,-460 }, { 102,-460 }, { 103, 860 }, { 104,-460 },
 { 105,-460 }, { 106,-460 }, { 107,-460 }, { 108,-460 }, { 109,-460 },
 { 110,-460 }, { 111,-460 }, { 112,-460 }, { 113,-460 }, { 114,-460 },
 { 115,-460 }, { 116,-460 }, { 117,-460 }, { 118,-460 }, { 119,-460 },
 { 120,-460 }, { 121,-460 }, { 122,-460 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-1136 }, {  41,-1136 }, {  42,-1136 },
 {  43,-1136 }, {   0,   0 }, {  45,-1044 }, {   0,   0 }, {  47,-1136 },
 {  48,-460 }, {  49,-460 }, {  50,-460 }, {  51,-460 }, {  52,-460 },
 {  53,-460 }, {  54,-460 }, {  55,-460 }, {  56,-460 }, {  57,-460 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-552 }, {  66,-552 }, {  67,-552 },
 {  68,-552 }, {  69,-552 }, {  70,-552 }, {  71,-552 }, {  72,-552 },
 {  73,-552 }, {  74,-552 }, {  75,-552 }, {  76,-552 }, {  77,-552 },
 {  78,-552 }, {  79,-552 }, {  80,-552 }, {  81,-552 }, {  82,-552 },

 {  83,-552 }, {  84,-552 }, {  85,-552 }, {  86,-552 }, {  87,-552 },
 {  88,-552 }, {  89,-552 }, {  90,-552 }, {   0,  12 }, {   0,3106 },
 {   0,   0 }, {  94,-1136 }, {   0,   0 }, {   0,   0 }, {  97,-552 },
 {  98,-552 }, {  99,-552 }, { 100, 860 }, { 101,-552 }, { 102,-552 },
 { 103,-552 }, { 104,-552 }, { 105,-552 }, { 106,-552 }, { 107,-552 },
 { 108,-552 }, { 109,-552 }, { 110,-552 }, { 111,-552 }, { 112,-552 },
 { 113,-552 }, { 114,-552 }, { 115,-552 }, { 116,-552 }, { 117,-552 },
 { 118,-552 }, { 119,-552 }, { 120,-552 }, { 121,-552 }, { 122,-552 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-1228 },

 {  41,-1228 }, {  42,-1228 }, {  43,-1228 }, {   0,   0 }, {  45,-1136 },
 {   0,   0 }, {  47,-1228 }, {  48,-552 }, {  49,-552 }, {  50,-552 },
 {  51,-552 }, {  52,-552 }, {  53,-552 }, {  54,-552 }, {  55,-552 },
 {  56,-552 }, {  57,-552 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-644 },
 {  66,-644 }, {  67,-644 }, {  68,-644 }, {  69,-644 }, {  70,-644 },
 {  71,-644 }, {  72,-644 }, {  73,-644 }, {  74,-644 }, {  75,-644 },
 {  76,-644 }, {  77,-644 }, {  78,-644 }, {  79,-644 }, {  80,-644 },
 {  81,-644 }, {  82,-644 }, {  83,-644 }, {  84,-644 }, {  85,-644 },
 {  86,-644 }, {  87,-644 }, {  88,-644 }, {  89,-644 }, {  90,-644 },

 {   0,  12 }, {   0,3014 }, {   0,   0 }, {  94,-1228 }, {   0,   0 },
 {   0,   0 }, {  97,-644 }, {  98,-644 }, {  99,-644 }, { 100,-644 },
 { 101,-644 }, { 102,-644 }, { 103,-644 }, { 104,-644 }, { 105,-644 },
 { 106,-644 }, { 107,-644 }, { 108,-644 }, { 109,-644 }, { 110,-644 },
 { 111, 860 }, { 112,-644 }, { 113,-644 }, { 114,-644 }, { 115,-644 },
 { 116,-644 }, { 117,-644 }, { 118,-644 }, { 119,-644 }, { 120,-644 },
 { 121,-644 }, { 122,-644 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-1320 }, {  41,-1320 }, {  42,-1320 }, {  43,-1320 },
 {   0,   0 }, {  45,-1228 }, {   0,   0 }, {  47,-1320 }, {  48,-644 },

 {  49,-644 }, {  50,-644 }, {  51,-644 }, {  52,-644 }, {  53,-644 },
 {  54,-644 }, {  55,-644 }, {  56,-644 }, {  57,-644 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-736 }, {  66,-736 }, {  67,-736 }, {  68,-736 },
 {  69,-736 }, {  70,-736 }, {  71,-736 }, {  72,-736 }, {  73,-736 },
 {  74,-736 }, {  75,-736 }, {  76,-736 }, {  77,-736 }, {  78,-736 },
 {  79,-736 }, {  80,-736 }, {  81,-736 }, {  82,-736 }, {  83,-736 },
 {  84,-736 }, {  85,-736 }, {  86,-736 }, {  87,-736 }, {  88,-736 },
 {  89,-736 }, {  90,-736 }, {   0,   0 }, {   0,2922 }, {   0,   0 },
 {  94,-1320 }, {   0,   0 }, {   0,   0 }, {  97,-736 }, {  98,-736 },

 {  99,-736 }, { 100,-736 }, { 101,-736 }, { 102,-736 }, { 103,-736 },
 { 104,-736 }, { 105,-736 }, { 106,-736 }, { 107,-736 }, { 108,-736 },
 { 109,-736 }, { 110,-736 }, { 111,-736 }, { 112,-736 }, { 113,-736 },
 { 114, 860 }, { 115,-736 }, { 116,-736 }, { 117,-736 }, { 118,-736 },
 { 119,-736 }, { 120,-736 }, { 121,-736 }, { 122,-736 }, {   0,  12 },
 {   0,2890 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48, 860 }, {  49, 860 }, {  50, 860 }, {  51, 860 },
 {  52, 860 }, {  53, 860 }, {  54, 860 }, {  55, 860 }, {  56, 860 },

 {  57, 860 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-1444 }, {  41,-1444 }, {  42,-1444 }, {  43,-1444 }, {   0,   0 },
 {  45,-1352 }, {   0,   0 }, {  47,-1444 }, {  48, 920 }, {  49, 920 },
 {  50, 920 }, {  51, 920 }, {  52, 920 }, {  53, 920 }, {  54, 920 },
 {  55, 920 }, {  56, 920 }, {  57, 920 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-1168 }, {  66,-1168 }, {  67,-1168 }, {  68,-1168 }, {  69,-1168 },
 {  70,-1168 }, {  71,-1168 }, {  72,-1168 }, {  73,-1168 }, {  74,-1168 },

 {  75,-1168 }, {  76,-1168 }, {  77,-1168 }, {  78,-1168 }, {  79,-1168 },
 {  80,-1168 }, {  81,-1168 }, {  82,-1168 }, {  83,-1168 }, {  84,-1168 },
 {  85,-1168 }, {  86,-1168 }, {  87,-1168 }, {  88,-1168 }, {  89,-1168 },
 {  90,-1168 }, {   0,  12 }, {   0,2798 }, {   0,   0 }, {  94,-1444 },
 {   0,   0 }, {   0,   0 }, {  97,-1168 }, {  98,-1168 }, {  99,-1168 },
 { 100,-1168 }, { 101,-1168 }, { 102,-1168 }, { 103,-1168 }, { 104,-1168 },
 { 105,-1168 }, { 106,-1168 }, { 107,-1168 }, { 108,-1168 }, { 109,-1168 },
 { 110,-1168 }, { 111,-1168 }, { 112,-1168 }, { 113,-1168 }, { 114,-1168 },
 { 115,-1168 }, { 116,-1168 }, { 117,-1168 }, { 118,-1168 }, { 119,-1168 },
 { 120,-1168 }, { 121,-1168 }, { 122,-1168 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-1536 }, {  41,-1536 }, {  42,-1536 },
 {  43,-1536 }, {   0,   0 }, {  45,-1444 }, {   0,   0 }, {  47,-1536 },
 {  48,-860 }, {  49,-860 }, {  50,-860 }, {  51,-860 }, {  52,-860 },
 {  53,-860 }, {  54,-860 }, {  55,-860 }, {  56,-860 }, {  57,-860 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-952 }, {  66,-952 }, {  67,-952 },
 {  68,-952 }, {  69,-952 }, {  70,-952 }, {  71,-952 }, {  72,-952 },
 {  73,-952 }, {  74,-952 }, {  75,-952 }, {  76,-952 }, {  77,-952 },
 {  78,-952 }, {  79,-952 }, {  80,-952 }, {  81,-952 }, {  82,-952 },

 {  83,-952 }, {  84,-952 }, {  85,-952 }, {  86,-952 }, {  87,-952 },
 {  88,-952 }, {  89,-952 }, {  90,-952 }, {   0,  12 }, {   0,2706 },
 {   0,   0 }, {  94,-1536 }, {   0,   0 }, {   0,   0 }, {  97, 920 },
 {  98,-952 }, {  99,-952 }, { 100,-952 }, { 101,-952 }, { 102,-952 },
 { 103,-952 }, { 104,-952 }, { 105,-952 }, { 106,-952 }, { 107,-952 },
 { 108,-952 }, { 109,-952 }, { 110,-952 }, { 111,-952 }, { 112,-952 },
 { 113,-952 }, { 114,-952 }, { 115,-952 }, { 116,-952 }, { 117,-952 },
 { 118,-952 }, { 119,-952 }, { 120,-952 }, { 121,-952 }, { 122,-952 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-1628 },

 {  41,-1628 }, {  42,-1628 }, {  43,-1628 }, {   0,   0 }, {  45,-1536 },
 {   0,   0 }, {  47,-1628 }, {  48,-952 }, {  49,-952 }, {  50,-952 },
 {  51,-952 }, {  52,-952 }, {  53,-952 }, {  54,-952 }, {  55,-952 },
 {  56,-952 }, {  57,-952 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1044 },
 {  66,-1044 }, {  67,-1044 }, {  68,-1044 }, {  69,-1044 }, {  70,-1044 },
 {  71,-1044 }, {  72,-1044 }, {  73,-1044 }, {  74,-1044 }, {  75,-1044 },
 {  76,-1044 }, {  77,-1044 }, {  78,-1044 }, {  79,-1044 }, {  80,-1044 },
 {  81,-1044 }, {  82,-1044 }, {  83,-1044 }, {  84,-1044 }, {  85,-1044 },
 {  86,-1044 }, {  87,-1044 }, {  88,-1044 }, {  89,-1044 }, {  90,-1044 },

 {   0,  12 }, {   0,2614 }, {   0,   0 }, {  94,-1628 }, {   0,   0 },
 {   0,   0 }, {  97,-1044 }, {  98, 920 }, {  99,-1044 }, { 100,-1044 },
 { 101,-1044 }, { 102,-1044 }, { 103,-1044 }, { 104,-1044 }, { 105,-1044 },
 { 106,-1044 }, { 107,-1044 }, { 108,-1044 }, { 109,-1044 }, { 110,-1044 },
 { 111,-1044 }, { 112,-1044 }, { 113,-1044 }, { 114,-1044 }, { 115,-1044 },
 { 116,-1044 }, { 117,-1044 }, { 118,-1044 }, { 119,-1044 }, { 120,-1044 },
 { 121,-1044 }, { 122,-1044 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-1720 }, {  41,-1720 }, {  42,-1720 }, {  43,-1720 },
 {   0,   0 }, {  45,-1628 }, {   0,   0 }, {  47,-1720 }, {  48,-1044 },

 {  49,-1044 }, {  50,-1044 }, {  51,-1044 }, {  52,-1044 }, {  53,-1044 },
 {  54,-1044 }, {  55,-1044 }, {  56,-1044 }, {  57,-1044 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-1136 }, {  66,-1136 }, {  67,-1136 }, {  68,-1136 },
 {  69,-1136 }, {  70,-1136 }, {  71,-1136 }, {  72,-1136 }, {  73,-1136 },
 {  74,-1136 }, {  75,-1136 }, {  76,-1136 }, {  77,-1136 }, {  78,-1136 },
 {  79,-1136 }, {  80,-1136 }, {  81,-1136 }, {  82,-1136 }, {  83,-1136 },
 {  84,-1136 }, {  85,-1136 }, {  86,-1136 }, {  87,-1136 }, {  88,-1136 },
 {  89,-1136 }, {  90,-1136 }, {   0,   8 }, {   0,2522 }, {   0,   0 },
 {  94,-1720 }, {   0,   0 }, {   0,   0 }, {  97,-1136 }, {  98,-1136 },

 {  99, 920 }, { 100,-1136 }, { 101,-1136 }, { 102,-1136 }, { 103,-1136 },
 { 104,-1136 }, { 105,-1136 }, { 106,-1136 }, { 107,-1136 }, { 108,-1136 },
 { 109,-1136 }, { 110,-1136 }, { 111,-1136 }, { 112,-1136 }, { 113,-1136 },
 { 114,-1136 }, { 115,-1136 }, { 116,-1136 }, { 117,-1136 }, { 118,-1136 },
 { 119,-1136 }, { 120,-1136 }, { 121,-1136 }, { 122,-1136 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-1812 }, {  41,-1812 },
 {  42,-1812 }, {  43,-1812 }, {   0,   0 }, {  45,-1720 }, {   0,   0 },
 {  47,-1812 }, {  48,-1136 }, {  49,-1136 }, {  50,-1136 }, {  51,-1136 },
 {  52,-1136 }, {  53,-1136 }, {  54,-1136 }, {  55,-1136 }, {  56,-1136 },

 {  57,-1136 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1228 }, {  66,-1228 },
 {  67,-1228 }, {  68,-1228 }, {  69,-1228 }, {  70,-1228 }, {  71,-1228 },
 {  72,-1228 }, {  73,-1228 }, {  74,-1228 }, {  75,-1228 }, {  76,-1228 },
 {  77,-1228 }, {  78,-1228 }, {  79,-1228 }, {  80,-1228 }, {  81,-1228 },
 {  82,-1228 }, {  83,-1228 }, {  84,-1228 }, {  85,-1228 }, {  86,-1228 },
 {  87,-1228 }, {  88,-1228 }, {  89,-1228 }, {  90,-1228 }, {   0,  12 },
 {   0,2430 }, {   0,   0 }, {  94,-1812 }, {   0,   0 }, {   0,   0 },
 {  97,-1228 }, {  98,-1228 }, {  99,-1228 }, { 100,-1228 }, { 101,-1228 },
 { 102,-1228 }, { 103,-1228 }, { 104,-1228 }, { 105,-1228 }, { 106,-1228 },

 { 107,-1228 }, { 108,-1228 }, { 109,-1228 }, { 110,-1228 }, { 111,-1228 },
 { 112,-1228 }, { 113,-1228 }, { 114,-1228 }, { 115,-1228 }, { 116,-1228 },
 { 117,-1228 }, { 118,-1228 }, { 119,-1228 }, { 120,-1228 }, { 121,-1228 },
 { 122,-1228 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-1904 }, {  41,-1904 }, {  42,-1904 }, {  43,-1904 }, {   0,   0 },
 {  45,-1812 }, {   0,   0 }, {  47,-1904 }, {  48,-1228 }, {  49,-1228 },
 {  50,-1228 }, {  51,-1228 }, {  52,-1228 }, {  53,-1228 }, {  54,-1228 },
 {  55,-1228 }, {  56,-1228 }, {  57,-1228 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  65,-1320 }, {  66,-1320 }, {  67,-1320 }, {  68,-1320 }, {  69,-1320 },
 {  70,-1320 }, {  71,-1320 }, {  72,-1320 }, {  73,-1320 }, {  74,-1320 },
 {  75,-1320 }, {  76,-1320 }, {  77,-1320 }, {  78,-1320 }, {  79,-1320 },
 {  80,-1320 }, {  81,-1320 }, {  82,-1320 }, {  83,-1320 }, {  84,-1320 },
 {  85,-1320 }, {  86,-1320 }, {  87,-1320 }, {  88,-1320 }, {  89,-1320 },
 {  90,-1320 }, {   0,   5 }, {   0,2338 }, {   0,   0 }, {  94,-1904 },
 {   0,   0 }, {   0,   0 }, {  97,-1320 }, {  98,-1320 }, {  99,-1320 },
 { 100,-1320 }, { 101,-1320 }, { 102,-1320 }, { 103,-1320 }, { 104,-1320 },
 { 105, 828 }, { 106,-1320 }, { 107,-1320 }, { 108,-1320 }, { 109,-1320 },
 { 110,-1320 }, { 111,-1320 }, { 112,-1320 }, { 113,-1320 }, { 114,-1320 },

 { 115,-1320 }, { 116,-1320 }, { 117,-1320 }, { 118,-1320 }, { 119,-1320 },
 { 120,-1320 }, { 121,-1320 }, { 122,-1320 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-1996 }, {  41,-1996 }, {  42,-1996 },
 {  43,-1996 }, {   0,   0 }, {  45,-1904 }, {   0,   0 }, {  47,-1996 },
 {  48,-1320 }, {  49,-1320 }, {  50,-1320 }, {  51,-1320 }, {  52,-1320 },
 {  53,-1320 }, {  54,-1320 }, {  55,-1320 }, {  56,-1320 }, {  57,-1320 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-1412 }, {  66,-1412 }, {  67,-1412 },
 {  68,-1412 }, {  69,-1412 }, {  70,-1412 }, {  71,-1412 }, {  72,-1412 },

 {  73,-1412 }, {  74,-1412 }, {  75,-1412 }, {  76,-1412 }, {  77,-1412 },
 {  78,-1412 }, {  79,-1412 }, {  80,-1412 }, {  81,-1412 }, {  82,-1412 },
 {  83,-1412 }, {  84,-1412 }, {  85,-1412 }, {  86,-1412 }, {  87,-1412 },
 {  88,-1412 }, {  89,-1412 }, {  90,-1412 }, {   0,  12 }, {   0,2246 },
 {   0,   0 }, {  94,-1996 }, {   0,   0 }, {   0,   0 }, {  97,-1412 },
 {  98,-1412 }, {  99,-1412 }, { 100,-1412 }, { 101,-1412 }, { 102,-1412 },
 { 103,-1412 }, { 104,-1412 }, { 105,-1412 }, { 106,-1412 }, { 107,-1412 },
 { 108,-1412 }, { 109,-1412 }, { 110,-1412 }, { 111,-1412 }, { 112,-1412 },
 { 113,-1412 }, { 114,-1412 }, { 115,-1412 }, { 116,-1412 }, { 117,-1412 },
 { 118,-1412 }, { 119,-1412 }, { 120,-1412 }, { 121,-1412 }, { 122,-1412 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-2088 },
 {  41,-2088 }, {  42,-2088 }, {  43,-2088 }, {   0,   0 }, {  45,-1996 },
 {   0,   0 }, {  47,-2088 }, {  48,-1412 }, {  49,-1412 }, {  50,-1412 },
 {  51,-1412 }, {  52,-1412 }, {  53,-1412 }, {  54,-1412 }, {  55,-1412 },
 {  56,-1412 }, {  57,-1412 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1504 },
 {  66,-1504 }, {  67,-1504 }, {  68,-1504 }, {  69,-1504 }, {  70,-1504 },
 {  71,-1504 }, {  72,-1504 }, {  73,-1504 }, {  74,-1504 }, {  75,-1504 },
 {  76,-1504 }, {  77,-1504 }, {  78,-1504 }, {  79,-1504 }, {  80,-1504 },

 {  81,-1504 }, {  82,-1504 }, {  83,-1504 }, {  84,-1504 }, {  85,-1504 },
 {  86,-1504 }, {  87,-1504 }, {  88,-1504 }, {  89,-1504 }, {  90,-1504 },
 {   0,   3 }, {   0,2154 }, {   0,   0 }, {  94,-2088 }, {   0,   0 },
 {   0,   0 }, {  97,-1504 }, {  98,-1504 }, {  99,-1504 }, { 100,-1504 },
 { 101,-1504 }, { 102,-1504 }, { 103, 736 }, { 104,-1504 }, { 105,-1504 },
 { 106,-1504 }, { 107,-1504 }, { 108,-1504 }, { 109,-1504 }, { 110,-1504 },
 { 111,-1504 }, { 112,-1504 }, { 113,-1504 }, { 114,-1504 }, { 115,-1504 },
 { 116,-1504 }, { 117,-1504 }, { 118,-1504 }, { 119,-1504 }, { 120,-1504 },
 { 121,-1504 }, { 122,-1504 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  40,-2180 }, {  41,-2180 }, {  42,-2180 }, {  43,-2180 },
 {   0,   0 }, {  45,-2088 }, {   0,   0 }, {  47,-2180 }, {  48,-1504 },
 {  49,-1504 }, {  50,-1504 }, {  51,-1504 }, {  52,-1504 }, {  53,-1504 },
 {  54,-1504 }, {  55,-1504 }, {  56,-1504 }, {  57,-1504 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-1596 }, {  66,-1596 }, {  67,-1596 }, {  68,-1596 },
 {  69,-1596 }, {  70,-1596 }, {  71,-1596 }, {  72,-1596 }, {  73,-1596 },
 {  74,-1596 }, {  75,-1596 }, {  76,-1596 }, {  77,-1596 }, {  78,-1596 },
 {  79,-1596 }, {  80,-1596 }, {  81,-1596 }, {  82,-1596 }, {  83,-1596 },
 {  84,-1596 }, {  85,-1596 }, {  86,-1596 }, {  87,-1596 }, {  88,-1596 },

 {  89,-1596 }, {  90,-1596 }, {   0,  12 }, {   0,2062 }, {   0,   0 },
 {  94,-2180 }, {   0,   0 }, {   0,   0 }, {  97,-1596 }, {  98,-1596 },
 {  99,-1596 }, { 100,-1596 }, { 101,-1596 }, { 102,-1596 }, { 103,-1596 },
 { 104,-1596 }, { 105,-1596 }, { 106,-1596 }, { 107,-1596 }, { 108,-1596 },
 { 109,-1596 }, { 110,-1596 }, { 111,-1596 }, { 112,-1596 }, { 113,-1596 },
 { 114,-1596 }, { 115,-1596 }, { 116,-1596 }, { 117,-1596 }, { 118,-1596 },
 { 119,-1596 }, { 120,-1596 }, { 121,-1596 }, { 122,-1596 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-2272 }, {  41,-2272 },
 {  42,-2272 }, {  43,-2272 }, {   0,   0 }, {  45,-2180 }, {   0,   0 },

 {  47,-2272 }, {  48, 644 }, {  49, 644 }, {  50, 644 }, {  51, 644 },
 {  52, 644 }, {  53, 644 }, {  54, 644 }, {  55, 644 }, {  56, 644 },
 {  57, 644 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1996 }, {  66,-1996 },
 {  67,-1996 }, {  68,-1996 }, {  69,-1996 }, {  70,-1996 }, {  71,-1996 },
 {  72,-1996 }, {  73,-1996 }, {  74,-1996 }, {  75,-1996 }, {  76,-1996 },
 {  77,-1996 }, {  78,-1996 }, {  79,-1996 }, {  80,-1996 }, {  81,-1996 },
 {  82,-1996 }, {  83,-1996 }, {  84,-1996 }, {  85,-1996 }, {  86,-1996 },
 {  87,-1996 }, {  88,-1996 }, {  89,-1996 }, {  90,-1996 }, {   0,  12 },
 {   0,1970 }, {   0,   0 }, {  94,-2272 }, {   0,   0 }, {   0,   0 },

 {  97,-1996 }, {  98,-1996 }, {  99,-1996 }, { 100,-1996 }, { 101,-1996 },
 { 102,-1996 }, { 103,-1996 }, { 104,-1996 }, { 105,-1996 }, { 106,-1996 },
 { 107,-1996 }, { 108,-1996 }, { 109,-1996 }, { 110,-1996 }, { 111,-1996 },
 { 112,-1996 }, { 113,-1996 }, { 114,-1996 }, { 115,-1996 }, { 116,-1996 },
 { 117,-1996 }, { 118,-1996 }, { 119,-1996 }, { 120,-1996 }, { 121,-1996 },
 { 122,-1996 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-2364 }, {  41,-2364 }, {  42,-2364 }, {  43,-2364 }, {   0,   0 },
 {  45,-2272 }, {  46,-952 }, {  47,-2364 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },

 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-2088 }, {  66,-2088 }, {  67,-2088 }, {  68,-2088 }, {  69,-2088 },
 {  70,-2088 }, {  71,-2088 }, {  72,-2088 }, {  73,-2088 }, {  74,-2088 },
 {  75,-2088 }, {  76,-2088 }, {  77,-2088 }, {  78,-2088 }, {  79,-2088 },
 {  80,-2088 }, {  81,-2088 }, {  82,-2088 }, {  83,-2088 }, {  84,-2088 },
 {  85,-2088 }, {  86,-2088 }, {  87,-2088 }, {  88,-2088 }, {  89,-2088 },
 {  90,-2088 }, {   0,  12 }, {   0,1878 }, {   0,   0 }, {  94,-2364 },
 {   0,   0 }, {   0,   0 }, {  97,-2088 }, {  98,-2088 }, {  99,-2088 },
 { 100,-2088 }, { 101,-2088 }, { 102,-2088 }, { 103,-2088 }, { 104,-2088 },

 { 105,-2088 }, { 106,-2088 }, { 107,-2088 }, { 108,-2088 }, { 109,-2088 },
 { 110,-2088 }, { 111,-2088 }, { 112,-2088 }, { 113,-2088 }, { 114,-2088 },
 { 115,-2088 }, { 116,-2088 }, { 117,-2088 }, { 118,-2088 }, { 119,-2088 },
 { 120,-2088 }, { 121,-2088 }, { 122,-2088 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-2456 }, {  41,-2456 }, {  42,-2456 },
 {  43,-2456 }, {   0,   0 }, {  45,-2364 }, {   0,   0 }, {  47,-2456 },
 {  48,-1780 }, {  49,-1780 }, {  50,-1780 }, {  51,-1780 }, {  52,-1780 },
 {  53,-1780 }, {  54,-1780 }, {  55,-1780 }, {  56,-1780 }, {  57,-1780 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  65,-1872 }, {  66,-1872 }, {  67,-1872 },
 {  68,-1872 }, {  69,-1872 }, {  70,-1872 }, {  71,-1872 }, {  72,-1872 },
 {  73,-1872 }, {  74,-1872 }, {  75,-1872 }, {  76,-1872 }, {  77,-1872 },
 {  78,-1872 }, {  79,-1872 }, {  80,-1872 }, {  81,-1872 }, {  82,-1872 },
 {  83,-1872 }, {  84,-1872 }, {  85,-1872 }, {  86,-1872 }, {  87,-1872 },
 {  88,-1872 }, {  89,-1872 }, {  90,-1872 }, {   0,  12 }, {   0,1786 },
 {   0,   0 }, {  94,-2456 }, {   0,   0 }, {   0,   0 }, {  97,-1872 },
 {  98,-1872 }, {  99,-1872 }, { 100,-1872 }, { 101,-1872 }, { 102,-1872 },
 { 103,-1872 }, { 104,-1872 }, { 105, 552 }, { 106,-1872 }, { 107,-1872 },
 { 108,-1872 }, { 109,-1872 }, { 110,-1872 }, { 111,-1872 }, { 112,-1872 },

 { 113,-1872 }, { 114,-1872 }, { 115,-1872 }, { 116,-1872 }, { 117,-1872 },
 { 118,-1872 }, { 119,-1872 }, { 120,-1872 }, { 121,-1872 }, { 122,-1872 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-2548 },
 {  41,-2548 }, {  42,-2548 }, {  43,-2548 }, {   0,   0 }, {  45,-2456 },
 {   0,   0 }, {  47,-2548 }, {  48,-1872 }, {  49,-1872 }, {  50,-1872 },
 {  51,-1872 }, {  52,-1872 }, {  53,-1872 }, {  54,-1872 }, {  55,-1872 },
 {  56,-1872 }, {  57,-1872 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1964 },
 {  66,-1964 }, {  67,-1964 }, {  68,-1964 }, {  69,-1964 }, {  70,-1964 },

 {  71,-1964 }, {  72,-1964 }, {  73,-1964 }, {  74,-1964 }, {  75,-1964 },
 {  76,-1964 }, {  77,-1964 }, {  78,-1964 }, {  79,-1964 }, {  80,-1964 },
 {  81,-1964 }, {  82,-1964 }, {  83,-1964 }, {  84,-1964 }, {  85,-1964 },
 {  86,-1964 }, {  87,-1964 }, {  88,-1964 }, {  89,-1964 }, {  90,-1964 },
 {   0,  12 }, {   0,1694 }, {   0,   0 }, {  94,-2548 }, {   0,   0 },
 {   0,   0 }, {  97,-1964 }, {  98,-1964 }, {  99,-1964 }, { 100,-1964 },
 { 101,-1964 }, { 102,-1964 }, { 103,-1964 }, { 104,-1964 }, { 105,-1964 },
 { 106,-1964 }, { 107,-1964 }, { 108, 552 }, { 109,-1964 }, { 110,-1964 },
 { 111,-1964 }, { 112,-1964 }, { 113,-1964 }, { 114,-1964 }, { 115,-1964 },
 { 116,-1964 }, { 117,-1964 }, { 118,-1964 }, { 119,-1964 }, { 120,-1964 },

 { 121,-1964 }, { 122,-1964 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-2640 }, {  41,-2640 }, {  42,-2640 }, {  43,-2640 },
 {   0,   0 }, {  45,-2548 }, {   0,   0 }, {  47,-2640 }, {  48,-1964 },
 {  49,-1964 }, {  50,-1964 }, {  51,-1964 }, {  52,-1964 }, {  53,-1964 },
 {  54,-1964 }, {  55,-1964 }, {  56,-1964 }, {  57,-1964 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2056 }, {  66,-2056 }, {  67,-2056 }, {  68,-2056 },
 {  69,-2056 }, {  70,-2056 }, {  71,-2056 }, {  72,-2056 }, {  73,-2056 },
 {  74,-2056 }, {  75,-2056 }, {  76,-2056 }, {  77,-2056 }, {  78,-2056 },

 {  79,-2056 }, {  80,-2056 }, {  81,-2056 }, {  82,-2056 }, {  83,-2056 },
 {  84,-2056 }, {  85,-2056 }, {  86,-2056 }, {  87,-2056 }, {  88,-2056 },
 {  89,-2056 }, {  90,-2056 }, {   0,  12 }, {   0,1602 }, {   0,   0 },
 {  94,-2640 }, {   0,   0 }, {   0,   0 }, {  97,-2056 }, {  98,-2056 },
 {  99,-2056 }, { 100,-2056 }, { 101,-2056 }, { 102,-2056 }, { 103,-2056 },
 { 104,-2056 }, { 105,-2056 }, { 106,-2056 }, { 107,-2056 }, { 108,-2056 },
 { 109,-2056 }, { 110,-2056 }, { 111,-2056 }, { 112,-2056 }, { 113,-2056 },
 { 114,-2056 }, { 115,-2056 }, { 116, 552 }, { 117,-2056 }, { 118,-2056 },
 { 119,-2056 }, { 120,-2056 }, { 121,-2056 }, { 122,-2056 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-2732 }, {  41,-2732 },
 {  42,-2732 }, {  43,-2732 }, {   0,   0 }, {  45,-2640 }, {   0,   0 },
 {  47,-2732 }, {  48,-2056 }, {  49,-2056 }, {  50,-2056 }, {  51,-2056 },
 {  52,-2056 }, {  53,-2056 }, {  54,-2056 }, {  55,-2056 }, {  56,-2056 },
 {  57,-2056 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-2148 }, {  66,-2148 },
 {  67,-2148 }, {  68,-2148 }, {  69,-2148 }, {  70,-2148 }, {  71,-2148 },
 {  72,-2148 }, {  73,-2148 }, {  74,-2148 }, {  75,-2148 }, {  76,-2148 },
 {  77,-2148 }, {  78,-2148 }, {  79,-2148 }, {  80,-2148 }, {  81,-2148 },
 {  82,-2148 }, {  83,-2148 }, {  84,-2148 }, {  85,-2148 }, {  86,-2148 },

 {  87,-2148 }, {  88,-2148 }, {  89,-2148 }, {  90,-2148 }, {   0,  12 },
 {   0,1510 }, {   0,   0 }, {  94,-2732 }, {   0,   0 }, {   0,   0 },
 {  97,-2148 }, {  98,-2148 }, {  99,-2148 }, { 100,-2148 }, { 101,-2148 },
 { 102,-2148 }, { 103,-2148 }, { 104,-2148 }, { 105,-2148 }, { 106,-2148 },
 { 107,-2148 }, { 108,-2148 }, { 109,-2148 }, { 110, 552 }, { 111,-2148 },
 { 112,-2148 }, { 113,-2148 }, { 114,-2148 }, { 115,-2148 }, { 116,-2148 },
 { 117,-2148 }, { 118,-2148 }, { 119,-2148 }, { 120,-2148 }, { 121,-2148 },
 { 122,-2148 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-2824 }, {  41,-2824 }, {  42,-2824 }, {  43,-2824 }, {   0,   0 },

 {  45,-2732 }, {   0,   0 }, {  47,-2824 }, {  48,-2148 }, {  49,-2148 },
 {  50,-2148 }, {  51,-2148 }, {  52,-2148 }, {  53,-2148 }, {  54,-2148 },
 {  55,-2148 }, {  56,-2148 }, {  57,-2148 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-2240 }, {  66,-2240 }, {  67,-2240 }, {  68,-2240 }, {  69,-2240 },
 {  70,-2240 }, {  71,-2240 }, {  72,-2240 }, {  73,-2240 }, {  74,-2240 },
 {  75,-2240 }, {  76,-2240 }, {  77,-2240 }, {  78,-2240 }, {  79,-2240 },
 {  80,-2240 }, {  81,-2240 }, {  82,-2240 }, {  83,-2240 }, {  84,-2240 },
 {  85,-2240 }, {  86,-2240 }, {  87,-2240 }, {  88,-2240 }, {  89,-2240 },
 {  90,-2240 }, {   0,  12 }, {   0,1418 }, {   0,   0 }, {  94,-2824 },

 {   0,   0 }, {   0,   0 }, {  97,-2240 }, {  98,-2240 }, {  99,-2240 },
 { 100,-2240 }, { 101,-2240 }, { 102,-2240 }, { 103,-2240 }, { 104,-2240 },
 { 105,-2240 }, { 106,-2240 }, { 107,-2240 }, { 108,-2240 }, { 109,-2240 },
 { 110,-2240 }, { 111,-2240 }, { 112,-2240 }, { 113,-2240 }, { 114, 552 },
 { 115,-2240 }, { 116,-2240 }, { 117,-2240 }, { 118,-2240 }, { 119,-2240 },
 { 120,-2240 }, { 121,-2240 }, { 122,-2240 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-2916 }, {  41,-2916 }, {  42,-2916 },
 {  43,-2916 }, {   0,   0 }, {  45,-2824 }, {  46,-1504 }, {  47,-2916 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },

 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-2640 }, {  66,-2640 }, {  67,-2640 },
 {  68,-2640 }, {  69,-2640 }, {  70,-2640 }, {  71,-2640 }, {  72,-2640 },
 {  73,-2640 }, {  74,-2640 }, {  75,-2640 }, {  76,-2640 }, {  77,-2640 },
 {  78,-2640 }, {  79,-2640 }, {  80,-2640 }, {  81,-2640 }, {  82,-2640 },
 {  83,-2640 }, {  84,-2640 }, {  85,-2640 }, {  86,-2640 }, {  87,-2640 },
 {  88,-2640 }, {  89,-2640 }, {  90,-2640 }, {   0,  12 }, {   0,1326 },
 {   0,   0 }, {  94,-2916 }, {   0,   0 }, {   0,   0 }, {  97,-2640 },
 {  98,-2640 }, {  99,-2640 }, { 100,-2640 }, { 101,-2640 }, { 102,-2640 },

 { 103,-2640 }, { 104,-2640 }, { 105,-2640 }, { 106,-2640 }, { 107,-2640 },
 { 108,-2640 }, { 109,-2640 }, { 110,-2640 }, { 111,-2640 }, { 112,-2640 },
 { 113,-2640 }, { 114,-2640 }, { 115,-2640 }, { 116,-2640 }, { 117,-2640 },
 { 118,-2640 }, { 119,-2640 }, { 120,-2640 }, { 121,-2640 }, { 122,-2640 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-3008 },
 {  41,-3008 }, {  42,-3008 }, {  43,-3008 }, {   0,   0 }, {  45,-2916 },
 {   0,   0 }, {  47,-3008 }, {  48,-2332 }, {  49,-2332 }, {  50,-2332 },
 {  51,-2332 }, {  52,-2332 }, {  53,-2332 }, {  54,-2332 }, {  55,-2332 },
 {  56,-2332 }, {  57,-2332 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-2424 },
 {  66,-2424 }, {  67,-2424 }, {  68,-2424 }, {  69,-2424 }, {  70,-2424 },
 {  71,-2424 }, {  72,-2424 }, {  73,-2424 }, {  74,-2424 }, {  75,-2424 },
 {  76,-2424 }, {  77,-2424 }, {  78,-2424 }, {  79,-2424 }, {  80,-2424 },
 {  81,-2424 }, {  82,-2424 }, {  83,-2424 }, {  84,-2424 }, {  85,-2424 },
 {  86,-2424 }, {  87,-2424 }, {  88,-2424 }, {  89,-2424 }, {  90,-2424 },
 {   0,  12 }, {   0,1234 }, {   0,   0 }, {  94,-3008 }, {   0,   0 },
 {   0,   0 }, {  97,-2424 }, {  98,-2424 }, {  99,-2424 }, { 100,-2424 },
 { 101,-2424 }, { 102,-2424 }, { 103,-2424 }, { 104,-2424 }, { 105,-2424 },
 { 106,-2424 }, { 107,-2424 }, { 108,-2424 }, { 109,-2424 }, { 110, 460 },

 { 111,-2424 }, { 112,-2424 }, { 113,-2424 }, { 114,-2424 }, { 115,-2424 },
 { 116,-2424 }, { 117,-2424 }, { 118,-2424 }, { 119,-2424 }, { 120,-2424 },
 { 121,-2424 }, { 122,-2424 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-3100 }, {  41,-3100 }, {  42,-3100 }, {  43,-3100 },
 {   0,   0 }, {  45,-3008 }, {   0,   0 }, {  47,-3100 }, {  48,-2424 },
 {  49,-2424 }, {  50,-2424 }, {  51,-2424 }, {  52,-2424 }, {  53,-2424 },
 {  54,-2424 }, {  55,-2424 }, {  56,-2424 }, {  57,-2424 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2516 }, {  66,-2516 }, {  67,-2516 }, {  68,-2516 },

 {  69,-2516 }, {  70,-2516 }, {  71,-2516 }, {  72,-2516 }, {  73,-2516 },
 {  74,-2516 }, {  75,-2516 }, {  76,-2516 }, {  77,-2516 }, {  78,-2516 },
 {  79,-2516 }, {  80,-2516 }, {  81,-2516 }, {  82,-2516 }, {  83,-2516 },
 {  84,-2516 }, {  85,-2516 }, {  86,-2516 }, {  87,-2516 }, {  88,-2516 },
 {  89,-2516 }, {  90,-2516 }, {   0,  12 }, {   0,1142 }, {   0,   0 },
 {  94,-3100 }, {   0,   0 }, {   0,   0 }, {  97,-2516 }, {  98,-2516 },
 {  99,-2516 }, { 100,-2516 }, { 101, 460 }, { 102,-2516 }, { 103,-2516 },
 { 104,-2516 }, { 105,-2516 }, { 106,-2516 }, { 107,-2516 }, { 108,-2516 },
 { 109,-2516 }, { 110,-2516 }, { 111,-2516 }, { 112,-2516 }, { 113,-2516 },
 { 114,-2516 }, { 115,-2516 }, { 116,-2516 }, { 117,-2516 }, { 118,-2516 },

 { 119,-2516 }, { 120,-2516 }, { 121,-2516 }, { 122,-2516 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-3192 }, {  41,-3192 },
 {  42,-3192 }, {  43,-3192 }, {   0,   0 }, {  45,-3100 }, {   0,   0 },
 {  47,-3192 }, {  48,-2516 }, {  49,-2516 }, {  50,-2516 }, {  51,-2516 },
 {  52,-2516 }, {  53,-2516 }, {  54,-2516 }, {  55,-2516 }, {  56,-2516 },
 {  57,-2516 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-2608 }, {  66,-2608 },
 {  67,-2608 }, {  68,-2608 }, {  69,-2608 }, {  70,-2608 }, {  71,-2608 },
 {  72,-2608 }, {  73,-2608 }, {  74,-2608 }, {  75,-2608 }, {  76,-2608 },

 {  77,-2608 }, {  78,-2608 }, {  79,-2608 }, {  80,-2608 }, {  81,-2608 },
 {  82,-2608 }, {  83,-2608 }, {  84,-2608 }, {  85,-2608 }, {  86,-2608 },
 {  87,-2608 }, {  88,-2608 }, {  89,-2608 }, {  90,-2608 }, {   0,   4 },
 {   0,1050 }, {   0,   0 }, {  94,-3192 }, {   0,   0 }, {   0,   0 },
 {  97,-2608 }, {  98,-2608 }, {  99,-2608 }, { 100,-2608 }, { 101,-2608 },
 { 102,-2608 }, { 103,-2608 }, { 104,-2608 }, { 105, 460 }, { 106,-2608 },
 { 107,-2608 }, { 108,-2608 }, { 109,-2608 }, { 110,-2608 }, { 111,-2608 },
 { 112,-2608 }, { 113,-2608 }, { 114,-2608 }, { 115,-2608 }, { 116,-2608 },
 { 117,-2608 }, { 118,-2608 }, { 119,-2608 }, { 120,-2608 }, { 121,-2608 },
 { 122,-2608 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-3284 }, {  41,-3284 }, {  42,-3284 }, {  43,-3284 }, {   0,   0 },
 {  45,-3192 }, {   0,   0 }, {  47,-3284 }, {  48,-2608 }, {  49,-2608 },
 {  50,-2608 }, {  51,-2608 }, {  52,-2608 }, {  53,-2608 }, {  54,-2608 },
 {  55,-2608 }, {  56,-2608 }, {  57,-2608 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-2700 }, {  66,-2700 }, {  67,-2700 }, {  68,-2700 }, {  69,-2700 },
 {  70,-2700 }, {  71,-2700 }, {  72,-2700 }, {  73,-2700 }, {  74,-2700 },
 {  75,-2700 }, {  76,-2700 }, {  77,-2700 }, {  78,-2700 }, {  79,-2700 },
 {  80,-2700 }, {  81,-2700 }, {  82,-2700 }, {  83,-2700 }, {  84,-2700 },

 {  85,-2700 }, {  86,-2700 }, {  87,-2700 }, {  88,-2700 }, {  89,-2700 },
 {  90,-2700 }, {   0,  12 }, {   0, 958 }, {   0,   0 }, {  94,-3284 },
 {   0,   0 }, {   0,   0 }, {  97,-2700 }, {  98,-2700 }, {  99,-2700 },
 { 100,-2700 }, { 101,-2700 }, { 102,-2700 }, { 103,-2700 }, { 104,-2700 },
 { 105,-2700 }, { 106,-2700 }, { 107,-2700 }, { 108,-2700 }, { 109,-2700 },
 { 110,-2700 }, { 111,-2700 }, { 112,-2700 }, { 113,-2700 }, { 114,-2700 },
 { 115,-2700 }, { 116,-2700 }, { 117,-2700 }, { 118,-2700 }, { 119,-2700 },
 { 120,-2700 }, { 121,-2700 }, { 122,-2700 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-3376 }, {  41,-3376 }, {  42,-3376 },

 {  43,-3376 }, {   0,   0 }, {  45,-3284 }, {   0,   0 }, {  47,-3376 },
 {  48,-2700 }, {  49,-2700 }, {  50,-2700 }, {  51,-2700 }, {  52,-2700 },
 {  53,-2700 }, {  54,-2700 }, {  55,-2700 }, {  56,-2700 }, {  57,-2700 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-2792 }, {  66,-2792 }, {  67,-2792 },
 {  68,-2792 }, {  69,-2792 }, {  70,-2792 }, {  71,-2792 }, {  72,-2792 },
 {  73,-2792 }, {  74,-2792 }, {  75,-2792 }, {  76,-2792 }, {  77,-2792 },
 {  78,-2792 }, {  79,-2792 }, {  80,-2792 }, {  81,-2792 }, {  82,-2792 },
 {  83,-2792 }, {  84,-2792 }, {  85,-2792 }, {  86,-2792 }, {  87,-2792 },
 {  88,-2792 }, {  89,-2792 }, {  90,-2792 }, {   0,  12 }, {   0, 866 },

 {   0,   0 }, {  94,-3376 }, {   0,   0 }, {   0,   0 }, {  97, 368 },
 {  98,-2792 }, {  99,-2792 }, { 100,-2792 }, { 101,-2792 }, { 102,-2792 },
 { 103,-2792 }, { 104,-2792 }, { 105,-2792 }, { 106,-2792 }, { 107,-2792 },
 { 108,-2792 }, { 109,-2792 }, { 110,-2792 }, { 111,-2792 }, { 112,-2792 },
 { 113,-2792 }, { 114,-2792 }, { 115,-2792 }, { 116,-2792 }, { 117,-2792 },
 { 118,-2792 }, { 119,-2792 }, { 120,-2792 }, { 121,-2792 }, { 122,-2792 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-3468 },
 {  41,-3468 }, {  42,-3468 }, {  43,-3468 }, {   0,   0 }, {  45,-3376 },
 {   0,   0 }, {  47,-3468 }, {  48,-2792 }, {  49,-2792 }, {  50,-2792 },

 {  51,-2792 }, {  52,-2792 }, {  53,-2792 }, {  54,-2792 }, {  55,-2792 },
 {  56,-2792 }, {  57,-2792 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-2884 },
 {  66,-2884 }, {  67,-2884 }, {  68,-2884 }, {  69,-2884 }, {  70,-2884 },
 {  71,-2884 }, {  72,-2884 }, {  73,-2884 }, {  74,-2884 }, {  75,-2884 },
 {  76,-2884 }, {  77,-2884 }, {  78,-2884 }, {  79,-2884 }, {  80,-2884 },
 {  81,-2884 }, {  82,-2884 }, {  83,-2884 }, {  84,-2884 }, {  85,-2884 },
 {  86,-2884 }, {  87,-2884 }, {  88,-2884 }, {  89,-2884 }, {  90,-2884 },
 {   0,   7 }, {   0, 774 }, {   0,   0 }, {  94,-3468 }, {   0,   0 },
 {   0,   0 }, {  97,-2884 }, {  98,-2884 }, {  99,-2884 }, { 100,-2884 },

 { 101,-2884 }, { 102,-2884 }, { 103,-2884 }, { 104,-2884 }, { 105,-2884 },
 { 106,-2884 }, { 107,-2884 }, { 108,-2884 }, { 109,-2884 }, { 110,-2884 },
 { 111,-2884 }, { 112,-2884 }, { 113,-2884 }, { 114,-2884 }, { 115, 368 },
 { 116,-2884 }, { 117,-2884 }, { 118,-2884 }, { 119,-2884 }, { 120,-2884 },
 { 121,-2884 }, { 122,-2884 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-3560 }, {  41,-3560 }, {  42,-3560 }, {  43,-3560 },
 {   0,   0 }, {  45,-3468 }, {   0,   0 }, {  47,-3560 }, {  48,-2884 },
 {  49,-2884 }, {  50,-2884 }, {  51,-2884 }, {  52,-2884 }, {  53,-2884 },
 {  54,-2884 }, {  55,-2884 }, {  56,-2884 }, {  57,-2884 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2976 }, {  66,-2976 }, {  67,-2976 }, {  68,-2976 },
 {  69,-2976 }, {  70,-2976 }, {  71,-2976 }, {  72,-2976 }, {  73,-2976 },
 {  74,-2976 }, {  75,-2976 }, {  76,-2976 }, {  77,-2976 }, {  78,-2976 },
 {  79,-2976 }, {  80,-2976 }, {  81,-2976 }, {  82,-2976 }, {  83,-2976 },
 {  84,-2976 }, {  85,-2976 }, {  86,-2976 }, {  87,-2976 }, {  88,-2976 },
 {  89,-2976 }, {  90,-2976 }, {   0,  12 }, {   0, 682 }, {   0,   0 },
 {  94,-3560 }, {   0,   0 }, {   0,   0 }, {  97,-2976 }, {  98,-2976 },
 {  99,-2976 }, { 100,-2976 }, { 101,-2976 }, { 102,-2976 }, { 103,-2976 },
 { 104,-2976 }, { 105,-2976 }, { 106,-2976 }, { 107,-2976 }, { 108,-2976 },

 { 109,-2976 }, { 110,-2976 }, { 111,-2976 }, { 112,-2976 }, { 113,-2976 },
 { 114,-2976 }, { 115,-2976 }, { 116,-2976 }, { 117,-2976 }, { 118,-2976 },
 { 119,-2976 }, { 120,-2976 }, { 121,-2976 }, { 122,-2976 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-3652 }, {  41,-3652 },
 {  42,-3652 }, {  43,-3652 }, {   0,   0 }, {  45,-3560 }, {   0,   0 },
 {  47,-3652 }, {  48,-2976 }, {  49,-2976 }, {  50,-2976 }, {  51,-2976 },
 {  52,-2976 }, {  53,-2976 }, {  54,-2976 }, {  55,-2976 }, {  56,-2976 },
 {  57,-2976 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-3068 }, {  66,-3068 },

 {  67,-3068 }, {  68,-3068 }, {  69,-3068 }, {  70,-3068 }, {  71,-3068 },
 {  72,-3068 }, {  73,-3068 }, {  74,-3068 }, {  75,-3068 }, {  76,-3068 },
 {  77,-3068 }, {  78,-3068 }, {  79,-3068 }, {  80,-3068 }, {  81,-3068 },
 {  82,-3068 }, {  83,-3068 }, {  84,-3068 }, {  85,-3068 }, {  86,-3068 },
 {  87,-3068 }, {  88,-3068 }, {  89,-3068 }, {  90,-3068 }, {   0,  12 },
 {   0, 590 }, {   0,   0 }, {  94,-3652 }, {   0,   0 }, {   0,   0 },
 {  97,-3068 }, {  98,-3068 }, {  99,-3068 }, { 100,-3068 }, { 101,-3068 },
 { 102,-3068 }, { 103,-3068 }, { 104,-3068 }, { 105,-3068 }, { 106,-3068 },
 { 107,-3068 }, { 108,-3068 }, { 109,-3068 }, { 110,-3068 }, { 111, 276 },
 { 112,-3068 }, { 113,-3068 }, { 114,-3068 }, { 115,-3068 }, { 116,-3068 },

 { 117,-3068 }, { 118,-3068 }, { 119,-3068 }, { 120,-3068 }, { 121,-3068 },
 { 122,-3068 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-3744 }, {  41,-3744 }, {  42,-3744 }, {  43,-3744 }, {   0,   0 },
 {  45,-3652 }, {   0,   0 }, {  47,-3744 }, {  48,-3068 }, {  49,-3068 },
 {  50,-3068 }, {  51,-3068 }, {  52,-3068 }, {  53,-3068 }, {  54,-3068 },
 {  55,-3068 }, {  56,-3068 }, {  57,-3068 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-3160 }, {  66,-3160 }, {  67,-3160 }, {  68,-3160 }, {  69,-3160 },
 {  70,-3160 }, {  71,-3160 }, {  72,-3160 }, {  73,-3160 }, {  74,-3160 },

 {  75,-3160 }, {  76,-3160 }, {  77,-3160 }, {  78,-3160 }, {  79,-3160 },
 {  80,-3160 }, {  81,-3160 }, {  82,-3160 }, {  83,-3160 }, {  84,-3160 },
 {  85,-3160 }, {  86,-3160 }, {  87,-3160 }, {  88,-3160 }, {  89,-3160 },
 {  90,-3160 }, {   0,   9 }, {   0, 498 }, {   0,   0 }, {  94,-3744 },
 {   0,   0 }, {   0,   0 }, {  97,-3160 }, {  98,-3160 }, {  99,-3160 },
 { 100,-3160 }, { 101,-3160 }, { 102,-3160 }, { 103,-3160 }, { 104,-3160 },
 { 105,-3160 }, { 106,-3160 }, { 107,-3160 }, { 108,-3160 }, { 109, 276 },
 { 110,-3160 }, { 111,-3160 }, { 112,-3160 }, { 113,-3160 }, { 114,-3160 },
 { 115,-3160 }, { 116,-3160 }, { 117,-3160 }, { 118,-3160 }, { 119,-3160 },
 { 120,-3160 }, { 121,-3160 }, { 122,-3160 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  40,-3836 }, {  41,-3836 }, {  42,-3836 },
 {  43,-3836 }, {   0,   0 }, {  45,-3744 }, {   0,   0 }, {  47,-3836 },
 {  48,-3160 }, {  49,-3160 }, {  50,-3160 }, {  51,-3160 }, {  52,-3160 },
 {  53,-3160 }, {  54,-3160 }, {  55,-3160 }, {  56,-3160 }, {  57,-3160 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-3252 }, {  66,-3252 }, {  67,-3252 },
 {  68,-3252 }, {  69,-3252 }, {  70,-3252 }, {  71,-3252 }, {  72,-3252 },
 {  73,-3252 }, {  74,-3252 }, {  75,-3252 }, {  76,-3252 }, {  77,-3252 },
 {  78,-3252 }, {  79,-3252 }, {  80,-3252 }, {  81,-3252 }, {  82,-3252 },

 {  83,-3252 }, {  84,-3252 }, {  85,-3252 }, {  86,-3252 }, {  87,-3252 },
 {  88,-3252 }, {  89,-3252 }, {  90,-3252 }, {   0,  12 }, {   0, 406 },
 {   0,   0 }, {  94,-3836 }, {   0,   0 }, {   0,   0 }, {  97,-3252 },
 {  98,-3252 }, {  99,-3252 }, { 100,-3252 }, { 101,-3252 }, { 102,-3252 },
 { 103,-3252 }, { 104,-3252 }, { 105,-3252 }, { 106,-3252 }, { 107,-3252 },
 { 108,-3252 }, { 109,-3252 }, { 110,-3252 }, { 111,-3252 }, { 112,-3252 },
 { 113,-3252 }, { 114,-3252 }, { 115,-3252 }, { 116,-3252 }, { 117,-3252 },
 { 118,-3252 }, { 119,-3252 }, { 120,-3252 }, { 121,-3252 }, { 122,-3252 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-3928 },

 {  41,-3928 }, {  42,-3928 }, {  43,-3928 }, {   0,   0 }, {  45,-3836 },
 {   0,   0 }, {  47,-3928 }, {  48,-3252 }, {  49,-3252 }, {  50,-3252 },
 {  51,-3252 }, {  52,-3252 }, {  53,-3252 }, {  54,-3252 }, {  55,-3252 },
 {  56,-3252 }, {  57,-3252 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-3344 },
 {  66,-3344 }, {  67,-3344 }, {  68,-3344 }, {  69,-3344 }, {  70,-3344 },
 {  71,-3344 }, {  72,-3344 }, {  73,-3344 }, {  74,-3344 }, {  75,-3344 },
 {  76,-3344 }, {  77,-3344 }, {  78,-3344 }, {  79,-3344 }, {  80,-3344 },
 {  81,-3344 }, {  82,-3344 }, {  83,-3344 }, {  84,-3344 }, {  85,-3344 },
 {  86,-3344 }, {  87,-3344 }, {  88,-3344 }, {  89,-3344 }, {  90,-3344 },

 {   0,  12 }, {   0, 314 }, {   0,   0 }, {  94,-3928 }, {   0,   0 },
 {   0,   0 }, {  97,-3344 }, {  98,-3344 }, {  99,-3344 }, { 100,-3344 },
 { 101,-3344 }, { 102,-3344 }, { 103,-3344 }, { 104,-3344 }, { 105,-3344 },
 { 106,-3344 }, { 107,-3344 }, { 108,-3344 }, { 109,-3344 }, { 110, 184 },
 { 111,-3344 }, { 112,-3344 }, { 113,-3344 }, { 114,-3344 }, { 115,-3344 },
 { 116,-3344 }, { 117,-3344 }, { 118,-3344 }, { 119,-3344 }, { 120,-3344 },
 { 121,-3344 }, { 122,-3344 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  40,-4020 }, {  41,-4020 }, {  42,-4020 }, {  43,-4020 },
 {   0,   0 }, {  45,-3928 }, {   0,   0 }, {  47,-4020 }, {  48,-3344 },

 {  49,-3344 }, {  50,-3344 }, {  51,-3344 }, {  52,-3344 }, {  53,-3344 },
 {  54,-3344 }, {  55,-3344 }, {  56,-3344 }, {  57,-3344 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-3436 }, {  66,-3436 }, {  67,-3436 }, {  68,-3436 },
 {  69,-3436 }, {  70,-3436 }, {  71,-3436 }, {  72,-3436 }, {  73,-3436 },
 {  74,-3436 }, {  75,-3436 }, {  76,-3436 }, {  77,-3436 }, {  78,-3436 },
 {  79,-3436 }, {  80,-3436 }, {  81,-3436 }, {  82,-3436 }, {  83,-3436 },
 {  84,-3436 }, {  85,-3436 }, {  86,-3436 }, {  87,-3436 }, {  88,-3436 },
 {  89,-3436 }, {  90,-3436 }, {   0,   6 }, {   0, 222 }, {   0,   0 },
 {  94,-4020 }, {   0,   0 }, {   0,   0 }, {  97,-3436 }, {  98,-3436 },

 {  99,-3436 }, { 100,-3436 }, { 101,-3436 }, { 102,-3436 }, { 103,-3436 },
 { 104,-3436 }, { 105,-3436 }, { 106,-3436 }, { 107,-3436 }, { 108,-3436 },
 { 109, 184 }, { 110,-3436 }, { 111,-3436 }, { 112,-3436 }, { 113,-3436 },
 { 114,-3436 }, { 115,-3436 }, { 116,-3436 }, { 117,-3436 }, { 118,-3436 },
 { 119,-3436 }, { 120,-3436 }, { 121,-3436 }, { 122,-3436 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,-4112 }, {  41,-4112 },
 {  42,-4112 }, {  43,-4112 }, {   0,   0 }, {  45,-4020 }, {   0,   0 },
 {  47,-4112 }, {  48,-3436 }, {  49,-3436 }, {  50,-3436 }, {  51,-3436 },
 {  52,-3436 }, {  53,-3436 }, {  54,-3436 }, {  55,-3436 }, {  56,-3436 },

 {  57,-3436 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-3528 }, {  66,-3528 },
 {  67,-3528 }, {  68,-3528 }, {  69,-3528 }, {  70,-3528 }, {  71,-3528 },
 {  72,-3528 }, {  73,-3528 }, {  74,-3528 }, {  75,-3528 }, {  76,-3528 },
 {  77,-3528 }, {  78,-3528 }, {  79,-3528 }, {  80,-3528 }, {  81,-3528 },
 {  82,-3528 }, {  83,-3528 }, {  84,-3528 }, {  85,-3528 }, {  86,-3528 },
 {  87,-3528 }, {  88,-3528 }, {  89,-3528 }, {  90,-3528 }, {   0,   2 },
 {   0, 130 }, {   0,   0 }, {  94,-4112 }, {   0,   0 }, {   0,   0 },
 {  97,-3528 }, {  98,-3528 }, {  99,-3528 }, { 100,-3528 }, { 101,-3528 },
 { 102,-3528 }, { 103,-3528 }, { 104,-3528 }, { 105,-3528 }, { 106,-3528 },

 { 107,-3528 }, { 108,-3528 }, { 109,-3528 }, { 110,-3528 }, { 111,-3528 },
 { 112,-3528 }, { 113,-3528 }, { 114,-3528 }, { 115,-3528 }, { 116,-3528 },
 { 117,-3528 }, { 118,-3528 }, { 119,-3528 }, { 120,-3528 }, { 121,-3528 },
 { 122,-3528 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  40,-4204 }, {  41,-4204 }, {  42,-4204 }, {  43,-4204 }, {   0,   0 },
 {  45,-4112 }, {   0,   0 }, {  47,-4204 }, {  48,-3528 }, {  49,-3528 },
 {  50,-3528 }, {  51,-3528 }, {  52,-3528 }, {  53,-3528 }, {  54,-3528 },
 {  55,-3528 }, {  56,-3528 }, {  57,-3528 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  65,-3620 }, {  66,-3620 }, {  67,-3620 }, {  68,-3620 }, {  69,-3620 },
 {  70,-3620 }, {  71,-3620 }, {  72,-3620 }, {  73,-3620 }, {  74,-3620 },
 {  75,-3620 }, {  76,-3620 }, {  77,-3620 }, {  78,-3620 }, {  79,-3620 },
 {  80,-3620 }, {  81,-3620 }, {  82,-3620 }, {  83,-3620 }, {  84,-3620 },
 {  85,-3620 }, {  86,-3620 }, {  87,-3620 }, {  88,-3620 }, {  89,-3620 },
 {  90,-3620 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  94,-4204 },
 {   0,   0 }, {   0,   0 }, {  97,-3620 }, {  98,-3620 }, {  99,-3620 },
 { 100,-3620 }, { 101,-3620 }, { 102,-3620 }, { 103,-3620 }, { 104,-3620 },
 { 105,-3620 }, { 106,-3620 }, { 107,-3620 }, { 108,-3620 }, { 109,-3620 },
 { 110,-3620 }, { 111,-3620 }, { 112,-3620 }, { 113,-3620 }, { 114,-3620 },

 { 115,-3620 }, { 116,-3620 }, { 117,-3620 }, { 118,-3620 }, { 119,-3620 },
 { 120,-3620 }, { 121,-3620 }, { 122,-3620 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 129,  18 },
 {   1,   0 },    };

static const struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[17] =
    {   0,
       11,   12,   13,   14,   15,   17,   18,   19,   20,   22,
       23,   25,   29,   33,   37,   41
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "parser.l"
#line 2 "parser.l"
#include <cstdio>
#include <iostream>
using namespace std;
#define YY_DECL extern "C" int yylex()
#include "parser.tab.h"

int line_num = 1;
#line 1793 "parser.flex.cpp"
#line 1794 "parser.flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( void );

void yyset_lval ( YYSTYPE * yylval_param  );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	errno=0; \
	while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param );

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
        YYSTYPE * yylval;
    
    yylval = yylval_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
/* %% [7.0] user's declarations go here */
#line 10 "parser.l"

#line 2064 "parser.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yy_start_state_list[(yy_start)];
yy_match:
		{
		const struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 17 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 17 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 18 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 11 "parser.l"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 12 "parser.l"
{ return PROGRAMM; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 13 "parser.l"
{ return VAR; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 14 "parser.l"
{ return START; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 15 "parser.l"
{ return END; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 17 "parser.l"
{ return FUNCTIONTYPE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 18 "parser.l"
{ return DOUBLETYPE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 19 "parser.l"
{ return INTTYPE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 20 "parser.l"
{ return DOMAINTYPE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 22 "parser.l"
{ return DOML; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 23 "parser.l"
{ return DOMR; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 25 "parser.l"
{
					yylval->sval = _strdup(yytext);
					return FUNCTIONVAL;
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 29 "parser.l"
{
					yylval->sval = _strdup(yytext);
					return STRING;
				}	
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 33 "parser.l"
{ 
					yylval->dval = atof(yytext);
					return DOUBLEVAL; 
				}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 "parser.l"
{ 
					yylval->ival = atoi(yytext); 
					return INTVAL; 
				}		
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 41 "parser.l"
{ 
					++line_num; 
					return ENDL; 
				}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 45 "parser.l"
ECHO;
	YY_BREAK
#line 2240 "parser.flex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yy_start_state_list[(yy_start)];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	int yy_c = 128;
	const struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 45 "parser.l"

/* добавить регулярное выражение для
// x*y + cos(x) и поместить его в соответствии с приоритетом выше или ниже
([a-zA-Z]+) - funcname
([-]?[0-9]+\.[0-9]+) - double
([-]?([0-9]+)) - int
([()\+\-\/\*\^]+) - tokens

\.left -> \[[0-9]+\] return ARRAYINDEX
*/
